
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Measurement
 * 
 */
export type Measurement = $Result.DefaultSelection<Prisma.$MeasurementPayload>
/**
 * Model Patient
 * 
 */
export type Patient = $Result.DefaultSelection<Prisma.$PatientPayload>
/**
 * Model PatientMeasurement
 * 
 */
export type PatientMeasurement = $Result.DefaultSelection<Prisma.$PatientMeasurementPayload>
/**
 * Model CategoryResult
 * 
 */
export type CategoryResult = $Result.DefaultSelection<Prisma.$CategoryResultPayload>
/**
 * Model DefaultCategoryResult
 * 
 */
export type DefaultCategoryResult = $Result.DefaultSelection<Prisma.$DefaultCategoryResultPayload>
/**
 * Model ProfilePicture
 * 
 */
export type ProfilePicture = $Result.DefaultSelection<Prisma.$ProfilePicturePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Gender: {
  male: 'male',
  female: 'female'
};

export type Gender = (typeof Gender)[keyof typeof Gender]

}

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.measurement`: Exposes CRUD operations for the **Measurement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Measurements
    * const measurements = await prisma.measurement.findMany()
    * ```
    */
  get measurement(): Prisma.MeasurementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patient`: Exposes CRUD operations for the **Patient** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Patients
    * const patients = await prisma.patient.findMany()
    * ```
    */
  get patient(): Prisma.PatientDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientMeasurement`: Exposes CRUD operations for the **PatientMeasurement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientMeasurements
    * const patientMeasurements = await prisma.patientMeasurement.findMany()
    * ```
    */
  get patientMeasurement(): Prisma.PatientMeasurementDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.categoryResult`: Exposes CRUD operations for the **CategoryResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CategoryResults
    * const categoryResults = await prisma.categoryResult.findMany()
    * ```
    */
  get categoryResult(): Prisma.CategoryResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.defaultCategoryResult`: Exposes CRUD operations for the **DefaultCategoryResult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DefaultCategoryResults
    * const defaultCategoryResults = await prisma.defaultCategoryResult.findMany()
    * ```
    */
  get defaultCategoryResult(): Prisma.DefaultCategoryResultDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profilePicture`: Exposes CRUD operations for the **ProfilePicture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProfilePictures
    * const profilePictures = await prisma.profilePicture.findMany()
    * ```
    */
  get profilePicture(): Prisma.ProfilePictureDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Measurement: 'Measurement',
    Patient: 'Patient',
    PatientMeasurement: 'PatientMeasurement',
    CategoryResult: 'CategoryResult',
    DefaultCategoryResult: 'DefaultCategoryResult',
    ProfilePicture: 'ProfilePicture'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "measurement" | "patient" | "patientMeasurement" | "categoryResult" | "defaultCategoryResult" | "profilePicture"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Measurement: {
        payload: Prisma.$MeasurementPayload<ExtArgs>
        fields: Prisma.MeasurementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeasurementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeasurementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>
          }
          findFirst: {
            args: Prisma.MeasurementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeasurementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>
          }
          findMany: {
            args: Prisma.MeasurementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>[]
          }
          create: {
            args: Prisma.MeasurementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>
          }
          createMany: {
            args: Prisma.MeasurementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MeasurementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>
          }
          update: {
            args: Prisma.MeasurementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>
          }
          deleteMany: {
            args: Prisma.MeasurementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeasurementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MeasurementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeasurementPayload>
          }
          aggregate: {
            args: Prisma.MeasurementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeasurement>
          }
          groupBy: {
            args: Prisma.MeasurementGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeasurementGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeasurementCountArgs<ExtArgs>
            result: $Utils.Optional<MeasurementCountAggregateOutputType> | number
          }
        }
      }
      Patient: {
        payload: Prisma.$PatientPayload<ExtArgs>
        fields: Prisma.PatientFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findFirst: {
            args: Prisma.PatientFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          findMany: {
            args: Prisma.PatientFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>[]
          }
          create: {
            args: Prisma.PatientCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          createMany: {
            args: Prisma.PatientCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PatientDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          update: {
            args: Prisma.PatientUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          deleteMany: {
            args: Prisma.PatientDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientPayload>
          }
          aggregate: {
            args: Prisma.PatientAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatient>
          }
          groupBy: {
            args: Prisma.PatientGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCountAggregateOutputType> | number
          }
        }
      }
      PatientMeasurement: {
        payload: Prisma.$PatientMeasurementPayload<ExtArgs>
        fields: Prisma.PatientMeasurementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientMeasurementFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMeasurementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientMeasurementFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMeasurementPayload>
          }
          findFirst: {
            args: Prisma.PatientMeasurementFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMeasurementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientMeasurementFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMeasurementPayload>
          }
          findMany: {
            args: Prisma.PatientMeasurementFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMeasurementPayload>[]
          }
          create: {
            args: Prisma.PatientMeasurementCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMeasurementPayload>
          }
          createMany: {
            args: Prisma.PatientMeasurementCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PatientMeasurementDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMeasurementPayload>
          }
          update: {
            args: Prisma.PatientMeasurementUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMeasurementPayload>
          }
          deleteMany: {
            args: Prisma.PatientMeasurementDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientMeasurementUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PatientMeasurementUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientMeasurementPayload>
          }
          aggregate: {
            args: Prisma.PatientMeasurementAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientMeasurement>
          }
          groupBy: {
            args: Prisma.PatientMeasurementGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientMeasurementGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientMeasurementCountArgs<ExtArgs>
            result: $Utils.Optional<PatientMeasurementCountAggregateOutputType> | number
          }
        }
      }
      CategoryResult: {
        payload: Prisma.$CategoryResultPayload<ExtArgs>
        fields: Prisma.CategoryResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryResultPayload>
          }
          findFirst: {
            args: Prisma.CategoryResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryResultPayload>
          }
          findMany: {
            args: Prisma.CategoryResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryResultPayload>[]
          }
          create: {
            args: Prisma.CategoryResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryResultPayload>
          }
          createMany: {
            args: Prisma.CategoryResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryResultPayload>
          }
          update: {
            args: Prisma.CategoryResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryResultPayload>
          }
          deleteMany: {
            args: Prisma.CategoryResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryResultPayload>
          }
          aggregate: {
            args: Prisma.CategoryResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoryResult>
          }
          groupBy: {
            args: Prisma.CategoryResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryResultCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryResultCountAggregateOutputType> | number
          }
        }
      }
      DefaultCategoryResult: {
        payload: Prisma.$DefaultCategoryResultPayload<ExtArgs>
        fields: Prisma.DefaultCategoryResultFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DefaultCategoryResultFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefaultCategoryResultPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DefaultCategoryResultFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefaultCategoryResultPayload>
          }
          findFirst: {
            args: Prisma.DefaultCategoryResultFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefaultCategoryResultPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DefaultCategoryResultFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefaultCategoryResultPayload>
          }
          findMany: {
            args: Prisma.DefaultCategoryResultFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefaultCategoryResultPayload>[]
          }
          create: {
            args: Prisma.DefaultCategoryResultCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefaultCategoryResultPayload>
          }
          createMany: {
            args: Prisma.DefaultCategoryResultCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.DefaultCategoryResultDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefaultCategoryResultPayload>
          }
          update: {
            args: Prisma.DefaultCategoryResultUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefaultCategoryResultPayload>
          }
          deleteMany: {
            args: Prisma.DefaultCategoryResultDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DefaultCategoryResultUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DefaultCategoryResultUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefaultCategoryResultPayload>
          }
          aggregate: {
            args: Prisma.DefaultCategoryResultAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDefaultCategoryResult>
          }
          groupBy: {
            args: Prisma.DefaultCategoryResultGroupByArgs<ExtArgs>
            result: $Utils.Optional<DefaultCategoryResultGroupByOutputType>[]
          }
          count: {
            args: Prisma.DefaultCategoryResultCountArgs<ExtArgs>
            result: $Utils.Optional<DefaultCategoryResultCountAggregateOutputType> | number
          }
        }
      }
      ProfilePicture: {
        payload: Prisma.$ProfilePicturePayload<ExtArgs>
        fields: Prisma.ProfilePictureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfilePictureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfilePictureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          findFirst: {
            args: Prisma.ProfilePictureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfilePictureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          findMany: {
            args: Prisma.ProfilePictureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>[]
          }
          create: {
            args: Prisma.ProfilePictureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          createMany: {
            args: Prisma.ProfilePictureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProfilePictureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          update: {
            args: Prisma.ProfilePictureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          deleteMany: {
            args: Prisma.ProfilePictureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfilePictureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProfilePictureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePicturePayload>
          }
          aggregate: {
            args: Prisma.ProfilePictureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfilePicture>
          }
          groupBy: {
            args: Prisma.ProfilePictureGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfilePictureGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfilePictureCountArgs<ExtArgs>
            result: $Utils.Optional<ProfilePictureCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    measurement?: MeasurementOmit
    patient?: PatientOmit
    patientMeasurement?: PatientMeasurementOmit
    categoryResult?: CategoryResultOmit
    defaultCategoryResult?: DefaultCategoryResultOmit
    profilePicture?: ProfilePictureOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    patient: number
    category_result: number
    default_category_result: number
    patient_measurement: number
    profile_picture: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | UserCountOutputTypeCountPatientArgs
    category_result?: boolean | UserCountOutputTypeCountCategory_resultArgs
    default_category_result?: boolean | UserCountOutputTypeCountDefault_category_resultArgs
    patient_measurement?: boolean | UserCountOutputTypeCountPatient_measurementArgs
    profile_picture?: boolean | UserCountOutputTypeCountProfile_pictureArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCategory_resultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryResultWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDefault_category_resultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DefaultCategoryResultWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatient_measurementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientMeasurementWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProfile_pictureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilePictureWhereInput
  }


  /**
   * Count Type PatientCountOutputType
   */

  export type PatientCountOutputType = {
    patient_measurement: number
  }

  export type PatientCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient_measurement?: boolean | PatientCountOutputTypeCountPatient_measurementArgs
  }

  // Custom InputTypes
  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCountOutputType
     */
    select?: PatientCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PatientCountOutputType without action
   */
  export type PatientCountOutputTypeCountPatient_measurementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientMeasurementWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    name: string | null
    token: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    name: string | null
    token: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    name: number
    token: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    token?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    token?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    name?: true
    token?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    password: string
    name: string
    token: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    token?: boolean
    patient?: boolean | User$patientArgs<ExtArgs>
    category_result?: boolean | User$category_resultArgs<ExtArgs>
    default_category_result?: boolean | User$default_category_resultArgs<ExtArgs>
    patient_measurement?: boolean | User$patient_measurementArgs<ExtArgs>
    profile_picture?: boolean | User$profile_pictureArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    name?: boolean
    token?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "name" | "token", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | User$patientArgs<ExtArgs>
    category_result?: boolean | User$category_resultArgs<ExtArgs>
    default_category_result?: boolean | User$default_category_resultArgs<ExtArgs>
    patient_measurement?: boolean | User$patient_measurementArgs<ExtArgs>
    profile_picture?: boolean | User$profile_pictureArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>[]
      category_result: Prisma.$CategoryResultPayload<ExtArgs>[]
      default_category_result: Prisma.$DefaultCategoryResultPayload<ExtArgs>[]
      patient_measurement: Prisma.$PatientMeasurementPayload<ExtArgs>[]
      profile_picture: Prisma.$ProfilePicturePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
      name: string
      token: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends User$patientArgs<ExtArgs> = {}>(args?: Subset<T, User$patientArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    category_result<T extends User$category_resultArgs<ExtArgs> = {}>(args?: Subset<T, User$category_resultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    default_category_result<T extends User$default_category_resultArgs<ExtArgs> = {}>(args?: Subset<T, User$default_category_resultArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DefaultCategoryResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    patient_measurement<T extends User$patient_measurementArgs<ExtArgs> = {}>(args?: Subset<T, User$patient_measurementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientMeasurementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    profile_picture<T extends User$profile_pictureArgs<ExtArgs> = {}>(args?: Subset<T, User$profile_pictureArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly token: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.patient
   */
  export type User$patientArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    cursor?: PatientWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * User.category_result
   */
  export type User$category_resultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryResult
     */
    select?: CategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryResult
     */
    omit?: CategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryResultInclude<ExtArgs> | null
    where?: CategoryResultWhereInput
    orderBy?: CategoryResultOrderByWithRelationInput | CategoryResultOrderByWithRelationInput[]
    cursor?: CategoryResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryResultScalarFieldEnum | CategoryResultScalarFieldEnum[]
  }

  /**
   * User.default_category_result
   */
  export type User$default_category_resultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefaultCategoryResult
     */
    select?: DefaultCategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefaultCategoryResult
     */
    omit?: DefaultCategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DefaultCategoryResultInclude<ExtArgs> | null
    where?: DefaultCategoryResultWhereInput
    orderBy?: DefaultCategoryResultOrderByWithRelationInput | DefaultCategoryResultOrderByWithRelationInput[]
    cursor?: DefaultCategoryResultWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DefaultCategoryResultScalarFieldEnum | DefaultCategoryResultScalarFieldEnum[]
  }

  /**
   * User.patient_measurement
   */
  export type User$patient_measurementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMeasurement
     */
    select?: PatientMeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMeasurement
     */
    omit?: PatientMeasurementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMeasurementInclude<ExtArgs> | null
    where?: PatientMeasurementWhereInput
    orderBy?: PatientMeasurementOrderByWithRelationInput | PatientMeasurementOrderByWithRelationInput[]
    cursor?: PatientMeasurementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientMeasurementScalarFieldEnum | PatientMeasurementScalarFieldEnum[]
  }

  /**
   * User.profile_picture
   */
  export type User$profile_pictureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    where?: ProfilePictureWhereInput
    orderBy?: ProfilePictureOrderByWithRelationInput | ProfilePictureOrderByWithRelationInput[]
    cursor?: ProfilePictureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfilePictureScalarFieldEnum | ProfilePictureScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Measurement
   */

  export type AggregateMeasurement = {
    _count: MeasurementCountAggregateOutputType | null
    _avg: MeasurementAvgAggregateOutputType | null
    _sum: MeasurementSumAggregateOutputType | null
    _min: MeasurementMinAggregateOutputType | null
    _max: MeasurementMaxAggregateOutputType | null
  }

  export type MeasurementAvgAggregateOutputType = {
    id: number | null
    systolic: number | null
    diastolic: number | null
    mean: number | null
    heart_rate: number | null
  }

  export type MeasurementSumAggregateOutputType = {
    id: number | null
    systolic: number | null
    diastolic: number | null
    mean: number | null
    heart_rate: number | null
  }

  export type MeasurementMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    systolic: number | null
    diastolic: number | null
    mean: number | null
    heart_rate: number | null
    timestamp: Date | null
  }

  export type MeasurementMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    systolic: number | null
    diastolic: number | null
    mean: number | null
    heart_rate: number | null
    timestamp: Date | null
  }

  export type MeasurementCountAggregateOutputType = {
    id: number
    user_id: number
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    timestamp: number
    _all: number
  }


  export type MeasurementAvgAggregateInputType = {
    id?: true
    systolic?: true
    diastolic?: true
    mean?: true
    heart_rate?: true
  }

  export type MeasurementSumAggregateInputType = {
    id?: true
    systolic?: true
    diastolic?: true
    mean?: true
    heart_rate?: true
  }

  export type MeasurementMinAggregateInputType = {
    id?: true
    user_id?: true
    systolic?: true
    diastolic?: true
    mean?: true
    heart_rate?: true
    timestamp?: true
  }

  export type MeasurementMaxAggregateInputType = {
    id?: true
    user_id?: true
    systolic?: true
    diastolic?: true
    mean?: true
    heart_rate?: true
    timestamp?: true
  }

  export type MeasurementCountAggregateInputType = {
    id?: true
    user_id?: true
    systolic?: true
    diastolic?: true
    mean?: true
    heart_rate?: true
    timestamp?: true
    _all?: true
  }

  export type MeasurementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Measurement to aggregate.
     */
    where?: MeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurements to fetch.
     */
    orderBy?: MeasurementOrderByWithRelationInput | MeasurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Measurements
    **/
    _count?: true | MeasurementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeasurementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeasurementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeasurementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeasurementMaxAggregateInputType
  }

  export type GetMeasurementAggregateType<T extends MeasurementAggregateArgs> = {
        [P in keyof T & keyof AggregateMeasurement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeasurement[P]>
      : GetScalarType<T[P], AggregateMeasurement[P]>
  }




  export type MeasurementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeasurementWhereInput
    orderBy?: MeasurementOrderByWithAggregationInput | MeasurementOrderByWithAggregationInput[]
    by: MeasurementScalarFieldEnum[] | MeasurementScalarFieldEnum
    having?: MeasurementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeasurementCountAggregateInputType | true
    _avg?: MeasurementAvgAggregateInputType
    _sum?: MeasurementSumAggregateInputType
    _min?: MeasurementMinAggregateInputType
    _max?: MeasurementMaxAggregateInputType
  }

  export type MeasurementGroupByOutputType = {
    id: number
    user_id: string
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    timestamp: Date
    _count: MeasurementCountAggregateOutputType | null
    _avg: MeasurementAvgAggregateOutputType | null
    _sum: MeasurementSumAggregateOutputType | null
    _min: MeasurementMinAggregateOutputType | null
    _max: MeasurementMaxAggregateOutputType | null
  }

  type GetMeasurementGroupByPayload<T extends MeasurementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeasurementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeasurementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeasurementGroupByOutputType[P]>
            : GetScalarType<T[P], MeasurementGroupByOutputType[P]>
        }
      >
    >


  export type MeasurementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    systolic?: boolean
    diastolic?: boolean
    mean?: boolean
    heart_rate?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["measurement"]>



  export type MeasurementSelectScalar = {
    id?: boolean
    user_id?: boolean
    systolic?: boolean
    diastolic?: boolean
    mean?: boolean
    heart_rate?: boolean
    timestamp?: boolean
  }

  export type MeasurementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "systolic" | "diastolic" | "mean" | "heart_rate" | "timestamp", ExtArgs["result"]["measurement"]>

  export type $MeasurementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Measurement"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      systolic: number
      diastolic: number
      mean: number
      heart_rate: number
      timestamp: Date
    }, ExtArgs["result"]["measurement"]>
    composites: {}
  }

  type MeasurementGetPayload<S extends boolean | null | undefined | MeasurementDefaultArgs> = $Result.GetResult<Prisma.$MeasurementPayload, S>

  type MeasurementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeasurementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeasurementCountAggregateInputType | true
    }

  export interface MeasurementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Measurement'], meta: { name: 'Measurement' } }
    /**
     * Find zero or one Measurement that matches the filter.
     * @param {MeasurementFindUniqueArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeasurementFindUniqueArgs>(args: SelectSubset<T, MeasurementFindUniqueArgs<ExtArgs>>): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Measurement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeasurementFindUniqueOrThrowArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeasurementFindUniqueOrThrowArgs>(args: SelectSubset<T, MeasurementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Measurement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementFindFirstArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeasurementFindFirstArgs>(args?: SelectSubset<T, MeasurementFindFirstArgs<ExtArgs>>): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Measurement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementFindFirstOrThrowArgs} args - Arguments to find a Measurement
     * @example
     * // Get one Measurement
     * const measurement = await prisma.measurement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeasurementFindFirstOrThrowArgs>(args?: SelectSubset<T, MeasurementFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Measurements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Measurements
     * const measurements = await prisma.measurement.findMany()
     * 
     * // Get first 10 Measurements
     * const measurements = await prisma.measurement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const measurementWithIdOnly = await prisma.measurement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeasurementFindManyArgs>(args?: SelectSubset<T, MeasurementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Measurement.
     * @param {MeasurementCreateArgs} args - Arguments to create a Measurement.
     * @example
     * // Create one Measurement
     * const Measurement = await prisma.measurement.create({
     *   data: {
     *     // ... data to create a Measurement
     *   }
     * })
     * 
     */
    create<T extends MeasurementCreateArgs>(args: SelectSubset<T, MeasurementCreateArgs<ExtArgs>>): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Measurements.
     * @param {MeasurementCreateManyArgs} args - Arguments to create many Measurements.
     * @example
     * // Create many Measurements
     * const measurement = await prisma.measurement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeasurementCreateManyArgs>(args?: SelectSubset<T, MeasurementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Measurement.
     * @param {MeasurementDeleteArgs} args - Arguments to delete one Measurement.
     * @example
     * // Delete one Measurement
     * const Measurement = await prisma.measurement.delete({
     *   where: {
     *     // ... filter to delete one Measurement
     *   }
     * })
     * 
     */
    delete<T extends MeasurementDeleteArgs>(args: SelectSubset<T, MeasurementDeleteArgs<ExtArgs>>): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Measurement.
     * @param {MeasurementUpdateArgs} args - Arguments to update one Measurement.
     * @example
     * // Update one Measurement
     * const measurement = await prisma.measurement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeasurementUpdateArgs>(args: SelectSubset<T, MeasurementUpdateArgs<ExtArgs>>): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Measurements.
     * @param {MeasurementDeleteManyArgs} args - Arguments to filter Measurements to delete.
     * @example
     * // Delete a few Measurements
     * const { count } = await prisma.measurement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeasurementDeleteManyArgs>(args?: SelectSubset<T, MeasurementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Measurements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Measurements
     * const measurement = await prisma.measurement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeasurementUpdateManyArgs>(args: SelectSubset<T, MeasurementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Measurement.
     * @param {MeasurementUpsertArgs} args - Arguments to update or create a Measurement.
     * @example
     * // Update or create a Measurement
     * const measurement = await prisma.measurement.upsert({
     *   create: {
     *     // ... data to create a Measurement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Measurement we want to update
     *   }
     * })
     */
    upsert<T extends MeasurementUpsertArgs>(args: SelectSubset<T, MeasurementUpsertArgs<ExtArgs>>): Prisma__MeasurementClient<$Result.GetResult<Prisma.$MeasurementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Measurements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementCountArgs} args - Arguments to filter Measurements to count.
     * @example
     * // Count the number of Measurements
     * const count = await prisma.measurement.count({
     *   where: {
     *     // ... the filter for the Measurements we want to count
     *   }
     * })
    **/
    count<T extends MeasurementCountArgs>(
      args?: Subset<T, MeasurementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeasurementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Measurement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeasurementAggregateArgs>(args: Subset<T, MeasurementAggregateArgs>): Prisma.PrismaPromise<GetMeasurementAggregateType<T>>

    /**
     * Group by Measurement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeasurementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeasurementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeasurementGroupByArgs['orderBy'] }
        : { orderBy?: MeasurementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeasurementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeasurementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Measurement model
   */
  readonly fields: MeasurementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Measurement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeasurementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Measurement model
   */
  interface MeasurementFieldRefs {
    readonly id: FieldRef<"Measurement", 'Int'>
    readonly user_id: FieldRef<"Measurement", 'String'>
    readonly systolic: FieldRef<"Measurement", 'Float'>
    readonly diastolic: FieldRef<"Measurement", 'Float'>
    readonly mean: FieldRef<"Measurement", 'Float'>
    readonly heart_rate: FieldRef<"Measurement", 'Float'>
    readonly timestamp: FieldRef<"Measurement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Measurement findUnique
   */
  export type MeasurementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Measurement
     */
    omit?: MeasurementOmit<ExtArgs> | null
    /**
     * Filter, which Measurement to fetch.
     */
    where: MeasurementWhereUniqueInput
  }

  /**
   * Measurement findUniqueOrThrow
   */
  export type MeasurementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Measurement
     */
    omit?: MeasurementOmit<ExtArgs> | null
    /**
     * Filter, which Measurement to fetch.
     */
    where: MeasurementWhereUniqueInput
  }

  /**
   * Measurement findFirst
   */
  export type MeasurementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Measurement
     */
    omit?: MeasurementOmit<ExtArgs> | null
    /**
     * Filter, which Measurement to fetch.
     */
    where?: MeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurements to fetch.
     */
    orderBy?: MeasurementOrderByWithRelationInput | MeasurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Measurements.
     */
    cursor?: MeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Measurements.
     */
    distinct?: MeasurementScalarFieldEnum | MeasurementScalarFieldEnum[]
  }

  /**
   * Measurement findFirstOrThrow
   */
  export type MeasurementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Measurement
     */
    omit?: MeasurementOmit<ExtArgs> | null
    /**
     * Filter, which Measurement to fetch.
     */
    where?: MeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurements to fetch.
     */
    orderBy?: MeasurementOrderByWithRelationInput | MeasurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Measurements.
     */
    cursor?: MeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Measurements.
     */
    distinct?: MeasurementScalarFieldEnum | MeasurementScalarFieldEnum[]
  }

  /**
   * Measurement findMany
   */
  export type MeasurementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Measurement
     */
    omit?: MeasurementOmit<ExtArgs> | null
    /**
     * Filter, which Measurements to fetch.
     */
    where?: MeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Measurements to fetch.
     */
    orderBy?: MeasurementOrderByWithRelationInput | MeasurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Measurements.
     */
    cursor?: MeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Measurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Measurements.
     */
    skip?: number
    distinct?: MeasurementScalarFieldEnum | MeasurementScalarFieldEnum[]
  }

  /**
   * Measurement create
   */
  export type MeasurementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Measurement
     */
    omit?: MeasurementOmit<ExtArgs> | null
    /**
     * The data needed to create a Measurement.
     */
    data: XOR<MeasurementCreateInput, MeasurementUncheckedCreateInput>
  }

  /**
   * Measurement createMany
   */
  export type MeasurementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Measurements.
     */
    data: MeasurementCreateManyInput | MeasurementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Measurement update
   */
  export type MeasurementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Measurement
     */
    omit?: MeasurementOmit<ExtArgs> | null
    /**
     * The data needed to update a Measurement.
     */
    data: XOR<MeasurementUpdateInput, MeasurementUncheckedUpdateInput>
    /**
     * Choose, which Measurement to update.
     */
    where: MeasurementWhereUniqueInput
  }

  /**
   * Measurement updateMany
   */
  export type MeasurementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Measurements.
     */
    data: XOR<MeasurementUpdateManyMutationInput, MeasurementUncheckedUpdateManyInput>
    /**
     * Filter which Measurements to update
     */
    where?: MeasurementWhereInput
    /**
     * Limit how many Measurements to update.
     */
    limit?: number
  }

  /**
   * Measurement upsert
   */
  export type MeasurementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Measurement
     */
    omit?: MeasurementOmit<ExtArgs> | null
    /**
     * The filter to search for the Measurement to update in case it exists.
     */
    where: MeasurementWhereUniqueInput
    /**
     * In case the Measurement found by the `where` argument doesn't exist, create a new Measurement with this data.
     */
    create: XOR<MeasurementCreateInput, MeasurementUncheckedCreateInput>
    /**
     * In case the Measurement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeasurementUpdateInput, MeasurementUncheckedUpdateInput>
  }

  /**
   * Measurement delete
   */
  export type MeasurementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Measurement
     */
    omit?: MeasurementOmit<ExtArgs> | null
    /**
     * Filter which Measurement to delete.
     */
    where: MeasurementWhereUniqueInput
  }

  /**
   * Measurement deleteMany
   */
  export type MeasurementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Measurements to delete
     */
    where?: MeasurementWhereInput
    /**
     * Limit how many Measurements to delete.
     */
    limit?: number
  }

  /**
   * Measurement without action
   */
  export type MeasurementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Measurement
     */
    select?: MeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Measurement
     */
    omit?: MeasurementOmit<ExtArgs> | null
  }


  /**
   * Model Patient
   */

  export type AggregatePatient = {
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  export type PatientAvgAggregateOutputType = {
    id: number | null
  }

  export type PatientSumAggregateOutputType = {
    id: number | null
  }

  export type PatientMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    name: string | null
    gender: $Enums.Gender | null
    phone: string | null
    work: string | null
    last_education: string | null
    place_of_birth: string | null
    date_of_birth: Date | null
  }

  export type PatientMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    name: string | null
    gender: $Enums.Gender | null
    phone: string | null
    work: string | null
    last_education: string | null
    place_of_birth: string | null
    date_of_birth: Date | null
  }

  export type PatientCountAggregateOutputType = {
    id: number
    user_id: number
    name: number
    gender: number
    phone: number
    work: number
    last_education: number
    place_of_birth: number
    date_of_birth: number
    _all: number
  }


  export type PatientAvgAggregateInputType = {
    id?: true
  }

  export type PatientSumAggregateInputType = {
    id?: true
  }

  export type PatientMinAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    gender?: true
    phone?: true
    work?: true
    last_education?: true
    place_of_birth?: true
    date_of_birth?: true
  }

  export type PatientMaxAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    gender?: true
    phone?: true
    work?: true
    last_education?: true
    place_of_birth?: true
    date_of_birth?: true
  }

  export type PatientCountAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    gender?: true
    phone?: true
    work?: true
    last_education?: true
    place_of_birth?: true
    date_of_birth?: true
    _all?: true
  }

  export type PatientAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patient to aggregate.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Patients
    **/
    _count?: true | PatientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMaxAggregateInputType
  }

  export type GetPatientAggregateType<T extends PatientAggregateArgs> = {
        [P in keyof T & keyof AggregatePatient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatient[P]>
      : GetScalarType<T[P], AggregatePatient[P]>
  }




  export type PatientGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientWhereInput
    orderBy?: PatientOrderByWithAggregationInput | PatientOrderByWithAggregationInput[]
    by: PatientScalarFieldEnum[] | PatientScalarFieldEnum
    having?: PatientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCountAggregateInputType | true
    _avg?: PatientAvgAggregateInputType
    _sum?: PatientSumAggregateInputType
    _min?: PatientMinAggregateInputType
    _max?: PatientMaxAggregateInputType
  }

  export type PatientGroupByOutputType = {
    id: number
    user_id: string
    name: string
    gender: $Enums.Gender
    phone: string
    work: string
    last_education: string
    place_of_birth: string
    date_of_birth: Date
    _count: PatientCountAggregateOutputType | null
    _avg: PatientAvgAggregateOutputType | null
    _sum: PatientSumAggregateOutputType | null
    _min: PatientMinAggregateOutputType | null
    _max: PatientMaxAggregateOutputType | null
  }

  type GetPatientGroupByPayload<T extends PatientGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientGroupByOutputType[P]>
            : GetScalarType<T[P], PatientGroupByOutputType[P]>
        }
      >
    >


  export type PatientSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    gender?: boolean
    phone?: boolean
    work?: boolean
    last_education?: boolean
    place_of_birth?: boolean
    date_of_birth?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    patient_measurement?: boolean | Patient$patient_measurementArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patient"]>



  export type PatientSelectScalar = {
    id?: boolean
    user_id?: boolean
    name?: boolean
    gender?: boolean
    phone?: boolean
    work?: boolean
    last_education?: boolean
    place_of_birth?: boolean
    date_of_birth?: boolean
  }

  export type PatientOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "name" | "gender" | "phone" | "work" | "last_education" | "place_of_birth" | "date_of_birth", ExtArgs["result"]["patient"]>
  export type PatientInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    patient_measurement?: boolean | Patient$patient_measurementArgs<ExtArgs>
    _count?: boolean | PatientCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PatientPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Patient"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      patient_measurement: Prisma.$PatientMeasurementPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      name: string
      gender: $Enums.Gender
      phone: string
      work: string
      last_education: string
      place_of_birth: string
      date_of_birth: Date
    }, ExtArgs["result"]["patient"]>
    composites: {}
  }

  type PatientGetPayload<S extends boolean | null | undefined | PatientDefaultArgs> = $Result.GetResult<Prisma.$PatientPayload, S>

  type PatientCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientCountAggregateInputType | true
    }

  export interface PatientDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Patient'], meta: { name: 'Patient' } }
    /**
     * Find zero or one Patient that matches the filter.
     * @param {PatientFindUniqueArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientFindUniqueArgs>(args: SelectSubset<T, PatientFindUniqueArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Patient that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientFindUniqueOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientFindFirstArgs>(args?: SelectSubset<T, PatientFindFirstArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Patient that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindFirstOrThrowArgs} args - Arguments to find a Patient
     * @example
     * // Get one Patient
     * const patient = await prisma.patient.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Patients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Patients
     * const patients = await prisma.patient.findMany()
     * 
     * // Get first 10 Patients
     * const patients = await prisma.patient.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientWithIdOnly = await prisma.patient.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientFindManyArgs>(args?: SelectSubset<T, PatientFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Patient.
     * @param {PatientCreateArgs} args - Arguments to create a Patient.
     * @example
     * // Create one Patient
     * const Patient = await prisma.patient.create({
     *   data: {
     *     // ... data to create a Patient
     *   }
     * })
     * 
     */
    create<T extends PatientCreateArgs>(args: SelectSubset<T, PatientCreateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Patients.
     * @param {PatientCreateManyArgs} args - Arguments to create many Patients.
     * @example
     * // Create many Patients
     * const patient = await prisma.patient.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCreateManyArgs>(args?: SelectSubset<T, PatientCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Patient.
     * @param {PatientDeleteArgs} args - Arguments to delete one Patient.
     * @example
     * // Delete one Patient
     * const Patient = await prisma.patient.delete({
     *   where: {
     *     // ... filter to delete one Patient
     *   }
     * })
     * 
     */
    delete<T extends PatientDeleteArgs>(args: SelectSubset<T, PatientDeleteArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Patient.
     * @param {PatientUpdateArgs} args - Arguments to update one Patient.
     * @example
     * // Update one Patient
     * const patient = await prisma.patient.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientUpdateArgs>(args: SelectSubset<T, PatientUpdateArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Patients.
     * @param {PatientDeleteManyArgs} args - Arguments to filter Patients to delete.
     * @example
     * // Delete a few Patients
     * const { count } = await prisma.patient.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientDeleteManyArgs>(args?: SelectSubset<T, PatientDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Patients
     * const patient = await prisma.patient.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientUpdateManyArgs>(args: SelectSubset<T, PatientUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Patient.
     * @param {PatientUpsertArgs} args - Arguments to update or create a Patient.
     * @example
     * // Update or create a Patient
     * const patient = await prisma.patient.upsert({
     *   create: {
     *     // ... data to create a Patient
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Patient we want to update
     *   }
     * })
     */
    upsert<T extends PatientUpsertArgs>(args: SelectSubset<T, PatientUpsertArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Patients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCountArgs} args - Arguments to filter Patients to count.
     * @example
     * // Count the number of Patients
     * const count = await prisma.patient.count({
     *   where: {
     *     // ... the filter for the Patients we want to count
     *   }
     * })
    **/
    count<T extends PatientCountArgs>(
      args?: Subset<T, PatientCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientAggregateArgs>(args: Subset<T, PatientAggregateArgs>): Prisma.PrismaPromise<GetPatientAggregateType<T>>

    /**
     * Group by Patient.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientGroupByArgs['orderBy'] }
        : { orderBy?: PatientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Patient model
   */
  readonly fields: PatientFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Patient.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    patient_measurement<T extends Patient$patient_measurementArgs<ExtArgs> = {}>(args?: Subset<T, Patient$patient_measurementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientMeasurementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Patient model
   */
  interface PatientFieldRefs {
    readonly id: FieldRef<"Patient", 'Int'>
    readonly user_id: FieldRef<"Patient", 'String'>
    readonly name: FieldRef<"Patient", 'String'>
    readonly gender: FieldRef<"Patient", 'Gender'>
    readonly phone: FieldRef<"Patient", 'String'>
    readonly work: FieldRef<"Patient", 'String'>
    readonly last_education: FieldRef<"Patient", 'String'>
    readonly place_of_birth: FieldRef<"Patient", 'String'>
    readonly date_of_birth: FieldRef<"Patient", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Patient findUnique
   */
  export type PatientFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findUniqueOrThrow
   */
  export type PatientFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient findFirst
   */
  export type PatientFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findFirstOrThrow
   */
  export type PatientFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patient to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Patients.
     */
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient findMany
   */
  export type PatientFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter, which Patients to fetch.
     */
    where?: PatientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Patients to fetch.
     */
    orderBy?: PatientOrderByWithRelationInput | PatientOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Patients.
     */
    cursor?: PatientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Patients from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Patients.
     */
    skip?: number
    distinct?: PatientScalarFieldEnum | PatientScalarFieldEnum[]
  }

  /**
   * Patient create
   */
  export type PatientCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to create a Patient.
     */
    data: XOR<PatientCreateInput, PatientUncheckedCreateInput>
  }

  /**
   * Patient createMany
   */
  export type PatientCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Patients.
     */
    data: PatientCreateManyInput | PatientCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Patient update
   */
  export type PatientUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The data needed to update a Patient.
     */
    data: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
    /**
     * Choose, which Patient to update.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient updateMany
   */
  export type PatientUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Patients.
     */
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyInput>
    /**
     * Filter which Patients to update
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to update.
     */
    limit?: number
  }

  /**
   * Patient upsert
   */
  export type PatientUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * The filter to search for the Patient to update in case it exists.
     */
    where: PatientWhereUniqueInput
    /**
     * In case the Patient found by the `where` argument doesn't exist, create a new Patient with this data.
     */
    create: XOR<PatientCreateInput, PatientUncheckedCreateInput>
    /**
     * In case the Patient was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientUpdateInput, PatientUncheckedUpdateInput>
  }

  /**
   * Patient delete
   */
  export type PatientDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
    /**
     * Filter which Patient to delete.
     */
    where: PatientWhereUniqueInput
  }

  /**
   * Patient deleteMany
   */
  export type PatientDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Patients to delete
     */
    where?: PatientWhereInput
    /**
     * Limit how many Patients to delete.
     */
    limit?: number
  }

  /**
   * Patient.patient_measurement
   */
  export type Patient$patient_measurementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMeasurement
     */
    select?: PatientMeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMeasurement
     */
    omit?: PatientMeasurementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMeasurementInclude<ExtArgs> | null
    where?: PatientMeasurementWhereInput
    orderBy?: PatientMeasurementOrderByWithRelationInput | PatientMeasurementOrderByWithRelationInput[]
    cursor?: PatientMeasurementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientMeasurementScalarFieldEnum | PatientMeasurementScalarFieldEnum[]
  }

  /**
   * Patient without action
   */
  export type PatientDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Patient
     */
    select?: PatientSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Patient
     */
    omit?: PatientOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientInclude<ExtArgs> | null
  }


  /**
   * Model PatientMeasurement
   */

  export type AggregatePatientMeasurement = {
    _count: PatientMeasurementCountAggregateOutputType | null
    _avg: PatientMeasurementAvgAggregateOutputType | null
    _sum: PatientMeasurementSumAggregateOutputType | null
    _min: PatientMeasurementMinAggregateOutputType | null
    _max: PatientMeasurementMaxAggregateOutputType | null
  }

  export type PatientMeasurementAvgAggregateOutputType = {
    id: number | null
    patient_id: number | null
    weight: number | null
    systolic: number | null
    diastolic: number | null
    mean: number | null
    heart_rate: number | null
  }

  export type PatientMeasurementSumAggregateOutputType = {
    id: number | null
    patient_id: number | null
    weight: number | null
    systolic: number | null
    diastolic: number | null
    mean: number | null
    heart_rate: number | null
  }

  export type PatientMeasurementMinAggregateOutputType = {
    id: number | null
    patient_id: number | null
    user_id: string | null
    weight: number | null
    systolic: number | null
    diastolic: number | null
    mean: number | null
    heart_rate: number | null
    category_result: string | null
    category_color: string | null
    timestamp: Date | null
  }

  export type PatientMeasurementMaxAggregateOutputType = {
    id: number | null
    patient_id: number | null
    user_id: string | null
    weight: number | null
    systolic: number | null
    diastolic: number | null
    mean: number | null
    heart_rate: number | null
    category_result: string | null
    category_color: string | null
    timestamp: Date | null
  }

  export type PatientMeasurementCountAggregateOutputType = {
    id: number
    patient_id: number
    user_id: number
    weight: number
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    category_result: number
    category_color: number
    timestamp: number
    _all: number
  }


  export type PatientMeasurementAvgAggregateInputType = {
    id?: true
    patient_id?: true
    weight?: true
    systolic?: true
    diastolic?: true
    mean?: true
    heart_rate?: true
  }

  export type PatientMeasurementSumAggregateInputType = {
    id?: true
    patient_id?: true
    weight?: true
    systolic?: true
    diastolic?: true
    mean?: true
    heart_rate?: true
  }

  export type PatientMeasurementMinAggregateInputType = {
    id?: true
    patient_id?: true
    user_id?: true
    weight?: true
    systolic?: true
    diastolic?: true
    mean?: true
    heart_rate?: true
    category_result?: true
    category_color?: true
    timestamp?: true
  }

  export type PatientMeasurementMaxAggregateInputType = {
    id?: true
    patient_id?: true
    user_id?: true
    weight?: true
    systolic?: true
    diastolic?: true
    mean?: true
    heart_rate?: true
    category_result?: true
    category_color?: true
    timestamp?: true
  }

  export type PatientMeasurementCountAggregateInputType = {
    id?: true
    patient_id?: true
    user_id?: true
    weight?: true
    systolic?: true
    diastolic?: true
    mean?: true
    heart_rate?: true
    category_result?: true
    category_color?: true
    timestamp?: true
    _all?: true
  }

  export type PatientMeasurementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientMeasurement to aggregate.
     */
    where?: PatientMeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientMeasurements to fetch.
     */
    orderBy?: PatientMeasurementOrderByWithRelationInput | PatientMeasurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientMeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientMeasurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientMeasurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientMeasurements
    **/
    _count?: true | PatientMeasurementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PatientMeasurementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PatientMeasurementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientMeasurementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientMeasurementMaxAggregateInputType
  }

  export type GetPatientMeasurementAggregateType<T extends PatientMeasurementAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientMeasurement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientMeasurement[P]>
      : GetScalarType<T[P], AggregatePatientMeasurement[P]>
  }




  export type PatientMeasurementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientMeasurementWhereInput
    orderBy?: PatientMeasurementOrderByWithAggregationInput | PatientMeasurementOrderByWithAggregationInput[]
    by: PatientMeasurementScalarFieldEnum[] | PatientMeasurementScalarFieldEnum
    having?: PatientMeasurementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientMeasurementCountAggregateInputType | true
    _avg?: PatientMeasurementAvgAggregateInputType
    _sum?: PatientMeasurementSumAggregateInputType
    _min?: PatientMeasurementMinAggregateInputType
    _max?: PatientMeasurementMaxAggregateInputType
  }

  export type PatientMeasurementGroupByOutputType = {
    id: number
    patient_id: number
    user_id: string
    weight: number
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    category_result: string | null
    category_color: string | null
    timestamp: Date
    _count: PatientMeasurementCountAggregateOutputType | null
    _avg: PatientMeasurementAvgAggregateOutputType | null
    _sum: PatientMeasurementSumAggregateOutputType | null
    _min: PatientMeasurementMinAggregateOutputType | null
    _max: PatientMeasurementMaxAggregateOutputType | null
  }

  type GetPatientMeasurementGroupByPayload<T extends PatientMeasurementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientMeasurementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientMeasurementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientMeasurementGroupByOutputType[P]>
            : GetScalarType<T[P], PatientMeasurementGroupByOutputType[P]>
        }
      >
    >


  export type PatientMeasurementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patient_id?: boolean
    user_id?: boolean
    weight?: boolean
    systolic?: boolean
    diastolic?: boolean
    mean?: boolean
    heart_rate?: boolean
    category_result?: boolean
    category_color?: boolean
    timestamp?: boolean
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientMeasurement"]>



  export type PatientMeasurementSelectScalar = {
    id?: boolean
    patient_id?: boolean
    user_id?: boolean
    weight?: boolean
    systolic?: boolean
    diastolic?: boolean
    mean?: boolean
    heart_rate?: boolean
    category_result?: boolean
    category_color?: boolean
    timestamp?: boolean
  }

  export type PatientMeasurementOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patient_id" | "user_id" | "weight" | "systolic" | "diastolic" | "mean" | "heart_rate" | "category_result" | "category_color" | "timestamp", ExtArgs["result"]["patientMeasurement"]>
  export type PatientMeasurementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | PatientDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PatientMeasurementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientMeasurement"
    objects: {
      patient: Prisma.$PatientPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      patient_id: number
      user_id: string
      weight: number
      systolic: number
      diastolic: number
      mean: number
      heart_rate: number
      category_result: string | null
      category_color: string | null
      timestamp: Date
    }, ExtArgs["result"]["patientMeasurement"]>
    composites: {}
  }

  type PatientMeasurementGetPayload<S extends boolean | null | undefined | PatientMeasurementDefaultArgs> = $Result.GetResult<Prisma.$PatientMeasurementPayload, S>

  type PatientMeasurementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientMeasurementFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientMeasurementCountAggregateInputType | true
    }

  export interface PatientMeasurementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientMeasurement'], meta: { name: 'PatientMeasurement' } }
    /**
     * Find zero or one PatientMeasurement that matches the filter.
     * @param {PatientMeasurementFindUniqueArgs} args - Arguments to find a PatientMeasurement
     * @example
     * // Get one PatientMeasurement
     * const patientMeasurement = await prisma.patientMeasurement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientMeasurementFindUniqueArgs>(args: SelectSubset<T, PatientMeasurementFindUniqueArgs<ExtArgs>>): Prisma__PatientMeasurementClient<$Result.GetResult<Prisma.$PatientMeasurementPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientMeasurement that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientMeasurementFindUniqueOrThrowArgs} args - Arguments to find a PatientMeasurement
     * @example
     * // Get one PatientMeasurement
     * const patientMeasurement = await prisma.patientMeasurement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientMeasurementFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientMeasurementFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientMeasurementClient<$Result.GetResult<Prisma.$PatientMeasurementPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientMeasurement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMeasurementFindFirstArgs} args - Arguments to find a PatientMeasurement
     * @example
     * // Get one PatientMeasurement
     * const patientMeasurement = await prisma.patientMeasurement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientMeasurementFindFirstArgs>(args?: SelectSubset<T, PatientMeasurementFindFirstArgs<ExtArgs>>): Prisma__PatientMeasurementClient<$Result.GetResult<Prisma.$PatientMeasurementPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientMeasurement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMeasurementFindFirstOrThrowArgs} args - Arguments to find a PatientMeasurement
     * @example
     * // Get one PatientMeasurement
     * const patientMeasurement = await prisma.patientMeasurement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientMeasurementFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientMeasurementFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientMeasurementClient<$Result.GetResult<Prisma.$PatientMeasurementPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientMeasurements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMeasurementFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientMeasurements
     * const patientMeasurements = await prisma.patientMeasurement.findMany()
     * 
     * // Get first 10 PatientMeasurements
     * const patientMeasurements = await prisma.patientMeasurement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientMeasurementWithIdOnly = await prisma.patientMeasurement.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientMeasurementFindManyArgs>(args?: SelectSubset<T, PatientMeasurementFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientMeasurementPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientMeasurement.
     * @param {PatientMeasurementCreateArgs} args - Arguments to create a PatientMeasurement.
     * @example
     * // Create one PatientMeasurement
     * const PatientMeasurement = await prisma.patientMeasurement.create({
     *   data: {
     *     // ... data to create a PatientMeasurement
     *   }
     * })
     * 
     */
    create<T extends PatientMeasurementCreateArgs>(args: SelectSubset<T, PatientMeasurementCreateArgs<ExtArgs>>): Prisma__PatientMeasurementClient<$Result.GetResult<Prisma.$PatientMeasurementPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientMeasurements.
     * @param {PatientMeasurementCreateManyArgs} args - Arguments to create many PatientMeasurements.
     * @example
     * // Create many PatientMeasurements
     * const patientMeasurement = await prisma.patientMeasurement.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientMeasurementCreateManyArgs>(args?: SelectSubset<T, PatientMeasurementCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PatientMeasurement.
     * @param {PatientMeasurementDeleteArgs} args - Arguments to delete one PatientMeasurement.
     * @example
     * // Delete one PatientMeasurement
     * const PatientMeasurement = await prisma.patientMeasurement.delete({
     *   where: {
     *     // ... filter to delete one PatientMeasurement
     *   }
     * })
     * 
     */
    delete<T extends PatientMeasurementDeleteArgs>(args: SelectSubset<T, PatientMeasurementDeleteArgs<ExtArgs>>): Prisma__PatientMeasurementClient<$Result.GetResult<Prisma.$PatientMeasurementPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientMeasurement.
     * @param {PatientMeasurementUpdateArgs} args - Arguments to update one PatientMeasurement.
     * @example
     * // Update one PatientMeasurement
     * const patientMeasurement = await prisma.patientMeasurement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientMeasurementUpdateArgs>(args: SelectSubset<T, PatientMeasurementUpdateArgs<ExtArgs>>): Prisma__PatientMeasurementClient<$Result.GetResult<Prisma.$PatientMeasurementPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientMeasurements.
     * @param {PatientMeasurementDeleteManyArgs} args - Arguments to filter PatientMeasurements to delete.
     * @example
     * // Delete a few PatientMeasurements
     * const { count } = await prisma.patientMeasurement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientMeasurementDeleteManyArgs>(args?: SelectSubset<T, PatientMeasurementDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientMeasurements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMeasurementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientMeasurements
     * const patientMeasurement = await prisma.patientMeasurement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientMeasurementUpdateManyArgs>(args: SelectSubset<T, PatientMeasurementUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PatientMeasurement.
     * @param {PatientMeasurementUpsertArgs} args - Arguments to update or create a PatientMeasurement.
     * @example
     * // Update or create a PatientMeasurement
     * const patientMeasurement = await prisma.patientMeasurement.upsert({
     *   create: {
     *     // ... data to create a PatientMeasurement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientMeasurement we want to update
     *   }
     * })
     */
    upsert<T extends PatientMeasurementUpsertArgs>(args: SelectSubset<T, PatientMeasurementUpsertArgs<ExtArgs>>): Prisma__PatientMeasurementClient<$Result.GetResult<Prisma.$PatientMeasurementPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientMeasurements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMeasurementCountArgs} args - Arguments to filter PatientMeasurements to count.
     * @example
     * // Count the number of PatientMeasurements
     * const count = await prisma.patientMeasurement.count({
     *   where: {
     *     // ... the filter for the PatientMeasurements we want to count
     *   }
     * })
    **/
    count<T extends PatientMeasurementCountArgs>(
      args?: Subset<T, PatientMeasurementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientMeasurementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientMeasurement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMeasurementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientMeasurementAggregateArgs>(args: Subset<T, PatientMeasurementAggregateArgs>): Prisma.PrismaPromise<GetPatientMeasurementAggregateType<T>>

    /**
     * Group by PatientMeasurement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientMeasurementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientMeasurementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientMeasurementGroupByArgs['orderBy'] }
        : { orderBy?: PatientMeasurementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientMeasurementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientMeasurementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientMeasurement model
   */
  readonly fields: PatientMeasurementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientMeasurement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientMeasurementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends PatientDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PatientDefaultArgs<ExtArgs>>): Prisma__PatientClient<$Result.GetResult<Prisma.$PatientPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientMeasurement model
   */
  interface PatientMeasurementFieldRefs {
    readonly id: FieldRef<"PatientMeasurement", 'Int'>
    readonly patient_id: FieldRef<"PatientMeasurement", 'Int'>
    readonly user_id: FieldRef<"PatientMeasurement", 'String'>
    readonly weight: FieldRef<"PatientMeasurement", 'Float'>
    readonly systolic: FieldRef<"PatientMeasurement", 'Float'>
    readonly diastolic: FieldRef<"PatientMeasurement", 'Float'>
    readonly mean: FieldRef<"PatientMeasurement", 'Float'>
    readonly heart_rate: FieldRef<"PatientMeasurement", 'Float'>
    readonly category_result: FieldRef<"PatientMeasurement", 'String'>
    readonly category_color: FieldRef<"PatientMeasurement", 'String'>
    readonly timestamp: FieldRef<"PatientMeasurement", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PatientMeasurement findUnique
   */
  export type PatientMeasurementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMeasurement
     */
    select?: PatientMeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMeasurement
     */
    omit?: PatientMeasurementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMeasurementInclude<ExtArgs> | null
    /**
     * Filter, which PatientMeasurement to fetch.
     */
    where: PatientMeasurementWhereUniqueInput
  }

  /**
   * PatientMeasurement findUniqueOrThrow
   */
  export type PatientMeasurementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMeasurement
     */
    select?: PatientMeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMeasurement
     */
    omit?: PatientMeasurementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMeasurementInclude<ExtArgs> | null
    /**
     * Filter, which PatientMeasurement to fetch.
     */
    where: PatientMeasurementWhereUniqueInput
  }

  /**
   * PatientMeasurement findFirst
   */
  export type PatientMeasurementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMeasurement
     */
    select?: PatientMeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMeasurement
     */
    omit?: PatientMeasurementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMeasurementInclude<ExtArgs> | null
    /**
     * Filter, which PatientMeasurement to fetch.
     */
    where?: PatientMeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientMeasurements to fetch.
     */
    orderBy?: PatientMeasurementOrderByWithRelationInput | PatientMeasurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientMeasurements.
     */
    cursor?: PatientMeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientMeasurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientMeasurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientMeasurements.
     */
    distinct?: PatientMeasurementScalarFieldEnum | PatientMeasurementScalarFieldEnum[]
  }

  /**
   * PatientMeasurement findFirstOrThrow
   */
  export type PatientMeasurementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMeasurement
     */
    select?: PatientMeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMeasurement
     */
    omit?: PatientMeasurementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMeasurementInclude<ExtArgs> | null
    /**
     * Filter, which PatientMeasurement to fetch.
     */
    where?: PatientMeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientMeasurements to fetch.
     */
    orderBy?: PatientMeasurementOrderByWithRelationInput | PatientMeasurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientMeasurements.
     */
    cursor?: PatientMeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientMeasurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientMeasurements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientMeasurements.
     */
    distinct?: PatientMeasurementScalarFieldEnum | PatientMeasurementScalarFieldEnum[]
  }

  /**
   * PatientMeasurement findMany
   */
  export type PatientMeasurementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMeasurement
     */
    select?: PatientMeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMeasurement
     */
    omit?: PatientMeasurementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMeasurementInclude<ExtArgs> | null
    /**
     * Filter, which PatientMeasurements to fetch.
     */
    where?: PatientMeasurementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientMeasurements to fetch.
     */
    orderBy?: PatientMeasurementOrderByWithRelationInput | PatientMeasurementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientMeasurements.
     */
    cursor?: PatientMeasurementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientMeasurements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientMeasurements.
     */
    skip?: number
    distinct?: PatientMeasurementScalarFieldEnum | PatientMeasurementScalarFieldEnum[]
  }

  /**
   * PatientMeasurement create
   */
  export type PatientMeasurementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMeasurement
     */
    select?: PatientMeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMeasurement
     */
    omit?: PatientMeasurementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMeasurementInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientMeasurement.
     */
    data: XOR<PatientMeasurementCreateInput, PatientMeasurementUncheckedCreateInput>
  }

  /**
   * PatientMeasurement createMany
   */
  export type PatientMeasurementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientMeasurements.
     */
    data: PatientMeasurementCreateManyInput | PatientMeasurementCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientMeasurement update
   */
  export type PatientMeasurementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMeasurement
     */
    select?: PatientMeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMeasurement
     */
    omit?: PatientMeasurementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMeasurementInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientMeasurement.
     */
    data: XOR<PatientMeasurementUpdateInput, PatientMeasurementUncheckedUpdateInput>
    /**
     * Choose, which PatientMeasurement to update.
     */
    where: PatientMeasurementWhereUniqueInput
  }

  /**
   * PatientMeasurement updateMany
   */
  export type PatientMeasurementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientMeasurements.
     */
    data: XOR<PatientMeasurementUpdateManyMutationInput, PatientMeasurementUncheckedUpdateManyInput>
    /**
     * Filter which PatientMeasurements to update
     */
    where?: PatientMeasurementWhereInput
    /**
     * Limit how many PatientMeasurements to update.
     */
    limit?: number
  }

  /**
   * PatientMeasurement upsert
   */
  export type PatientMeasurementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMeasurement
     */
    select?: PatientMeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMeasurement
     */
    omit?: PatientMeasurementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMeasurementInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientMeasurement to update in case it exists.
     */
    where: PatientMeasurementWhereUniqueInput
    /**
     * In case the PatientMeasurement found by the `where` argument doesn't exist, create a new PatientMeasurement with this data.
     */
    create: XOR<PatientMeasurementCreateInput, PatientMeasurementUncheckedCreateInput>
    /**
     * In case the PatientMeasurement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientMeasurementUpdateInput, PatientMeasurementUncheckedUpdateInput>
  }

  /**
   * PatientMeasurement delete
   */
  export type PatientMeasurementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMeasurement
     */
    select?: PatientMeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMeasurement
     */
    omit?: PatientMeasurementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMeasurementInclude<ExtArgs> | null
    /**
     * Filter which PatientMeasurement to delete.
     */
    where: PatientMeasurementWhereUniqueInput
  }

  /**
   * PatientMeasurement deleteMany
   */
  export type PatientMeasurementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientMeasurements to delete
     */
    where?: PatientMeasurementWhereInput
    /**
     * Limit how many PatientMeasurements to delete.
     */
    limit?: number
  }

  /**
   * PatientMeasurement without action
   */
  export type PatientMeasurementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientMeasurement
     */
    select?: PatientMeasurementSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientMeasurement
     */
    omit?: PatientMeasurementOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientMeasurementInclude<ExtArgs> | null
  }


  /**
   * Model CategoryResult
   */

  export type AggregateCategoryResult = {
    _count: CategoryResultCountAggregateOutputType | null
    _avg: CategoryResultAvgAggregateOutputType | null
    _sum: CategoryResultSumAggregateOutputType | null
    _min: CategoryResultMinAggregateOutputType | null
    _max: CategoryResultMaxAggregateOutputType | null
  }

  export type CategoryResultAvgAggregateOutputType = {
    id: number | null
    min_age: number | null
    max_age: number | null
    min_systolic: number | null
    max_systolic: number | null
    min_diastolic: number | null
    max_diastolic: number | null
  }

  export type CategoryResultSumAggregateOutputType = {
    id: number | null
    min_age: number | null
    max_age: number | null
    min_systolic: number | null
    max_systolic: number | null
    min_diastolic: number | null
    max_diastolic: number | null
  }

  export type CategoryResultMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    name: string | null
    gender: string | null
    color: string | null
    is_age_required: boolean | null
    min_age: number | null
    max_age: number | null
    min_systolic: number | null
    max_systolic: number | null
    min_diastolic: number | null
    max_diastolic: number | null
    description: string | null
  }

  export type CategoryResultMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    name: string | null
    gender: string | null
    color: string | null
    is_age_required: boolean | null
    min_age: number | null
    max_age: number | null
    min_systolic: number | null
    max_systolic: number | null
    min_diastolic: number | null
    max_diastolic: number | null
    description: string | null
  }

  export type CategoryResultCountAggregateOutputType = {
    id: number
    user_id: number
    name: number
    gender: number
    color: number
    is_age_required: number
    min_age: number
    max_age: number
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: number
    _all: number
  }


  export type CategoryResultAvgAggregateInputType = {
    id?: true
    min_age?: true
    max_age?: true
    min_systolic?: true
    max_systolic?: true
    min_diastolic?: true
    max_diastolic?: true
  }

  export type CategoryResultSumAggregateInputType = {
    id?: true
    min_age?: true
    max_age?: true
    min_systolic?: true
    max_systolic?: true
    min_diastolic?: true
    max_diastolic?: true
  }

  export type CategoryResultMinAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    gender?: true
    color?: true
    is_age_required?: true
    min_age?: true
    max_age?: true
    min_systolic?: true
    max_systolic?: true
    min_diastolic?: true
    max_diastolic?: true
    description?: true
  }

  export type CategoryResultMaxAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    gender?: true
    color?: true
    is_age_required?: true
    min_age?: true
    max_age?: true
    min_systolic?: true
    max_systolic?: true
    min_diastolic?: true
    max_diastolic?: true
    description?: true
  }

  export type CategoryResultCountAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    gender?: true
    color?: true
    is_age_required?: true
    min_age?: true
    max_age?: true
    min_systolic?: true
    max_systolic?: true
    min_diastolic?: true
    max_diastolic?: true
    description?: true
    _all?: true
  }

  export type CategoryResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoryResult to aggregate.
     */
    where?: CategoryResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryResults to fetch.
     */
    orderBy?: CategoryResultOrderByWithRelationInput | CategoryResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CategoryResults
    **/
    _count?: true | CategoryResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategoryResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryResultMaxAggregateInputType
  }

  export type GetCategoryResultAggregateType<T extends CategoryResultAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoryResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoryResult[P]>
      : GetScalarType<T[P], AggregateCategoryResult[P]>
  }




  export type CategoryResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryResultWhereInput
    orderBy?: CategoryResultOrderByWithAggregationInput | CategoryResultOrderByWithAggregationInput[]
    by: CategoryResultScalarFieldEnum[] | CategoryResultScalarFieldEnum
    having?: CategoryResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryResultCountAggregateInputType | true
    _avg?: CategoryResultAvgAggregateInputType
    _sum?: CategoryResultSumAggregateInputType
    _min?: CategoryResultMinAggregateInputType
    _max?: CategoryResultMaxAggregateInputType
  }

  export type CategoryResultGroupByOutputType = {
    id: number
    user_id: string
    name: string
    gender: string
    color: string
    is_age_required: boolean
    min_age: number | null
    max_age: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
    _count: CategoryResultCountAggregateOutputType | null
    _avg: CategoryResultAvgAggregateOutputType | null
    _sum: CategoryResultSumAggregateOutputType | null
    _min: CategoryResultMinAggregateOutputType | null
    _max: CategoryResultMaxAggregateOutputType | null
  }

  type GetCategoryResultGroupByPayload<T extends CategoryResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryResultGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryResultGroupByOutputType[P]>
        }
      >
    >


  export type CategoryResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    gender?: boolean
    color?: boolean
    is_age_required?: boolean
    min_age?: boolean
    max_age?: boolean
    min_systolic?: boolean
    max_systolic?: boolean
    min_diastolic?: boolean
    max_diastolic?: boolean
    description?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoryResult"]>



  export type CategoryResultSelectScalar = {
    id?: boolean
    user_id?: boolean
    name?: boolean
    gender?: boolean
    color?: boolean
    is_age_required?: boolean
    min_age?: boolean
    max_age?: boolean
    min_systolic?: boolean
    max_systolic?: boolean
    min_diastolic?: boolean
    max_diastolic?: boolean
    description?: boolean
  }

  export type CategoryResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "name" | "gender" | "color" | "is_age_required" | "min_age" | "max_age" | "min_systolic" | "max_systolic" | "min_diastolic" | "max_diastolic" | "description", ExtArgs["result"]["categoryResult"]>
  export type CategoryResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CategoryResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CategoryResult"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      name: string
      gender: string
      color: string
      is_age_required: boolean
      min_age: number | null
      max_age: number | null
      min_systolic: number
      max_systolic: number
      min_diastolic: number
      max_diastolic: number
      description: string
    }, ExtArgs["result"]["categoryResult"]>
    composites: {}
  }

  type CategoryResultGetPayload<S extends boolean | null | undefined | CategoryResultDefaultArgs> = $Result.GetResult<Prisma.$CategoryResultPayload, S>

  type CategoryResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryResultCountAggregateInputType | true
    }

  export interface CategoryResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CategoryResult'], meta: { name: 'CategoryResult' } }
    /**
     * Find zero or one CategoryResult that matches the filter.
     * @param {CategoryResultFindUniqueArgs} args - Arguments to find a CategoryResult
     * @example
     * // Get one CategoryResult
     * const categoryResult = await prisma.categoryResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryResultFindUniqueArgs>(args: SelectSubset<T, CategoryResultFindUniqueArgs<ExtArgs>>): Prisma__CategoryResultClient<$Result.GetResult<Prisma.$CategoryResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CategoryResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryResultFindUniqueOrThrowArgs} args - Arguments to find a CategoryResult
     * @example
     * // Get one CategoryResult
     * const categoryResult = await prisma.categoryResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryResultFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryResultClient<$Result.GetResult<Prisma.$CategoryResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CategoryResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryResultFindFirstArgs} args - Arguments to find a CategoryResult
     * @example
     * // Get one CategoryResult
     * const categoryResult = await prisma.categoryResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryResultFindFirstArgs>(args?: SelectSubset<T, CategoryResultFindFirstArgs<ExtArgs>>): Prisma__CategoryResultClient<$Result.GetResult<Prisma.$CategoryResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CategoryResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryResultFindFirstOrThrowArgs} args - Arguments to find a CategoryResult
     * @example
     * // Get one CategoryResult
     * const categoryResult = await prisma.categoryResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryResultFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryResultClient<$Result.GetResult<Prisma.$CategoryResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CategoryResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CategoryResults
     * const categoryResults = await prisma.categoryResult.findMany()
     * 
     * // Get first 10 CategoryResults
     * const categoryResults = await prisma.categoryResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryResultWithIdOnly = await prisma.categoryResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryResultFindManyArgs>(args?: SelectSubset<T, CategoryResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CategoryResult.
     * @param {CategoryResultCreateArgs} args - Arguments to create a CategoryResult.
     * @example
     * // Create one CategoryResult
     * const CategoryResult = await prisma.categoryResult.create({
     *   data: {
     *     // ... data to create a CategoryResult
     *   }
     * })
     * 
     */
    create<T extends CategoryResultCreateArgs>(args: SelectSubset<T, CategoryResultCreateArgs<ExtArgs>>): Prisma__CategoryResultClient<$Result.GetResult<Prisma.$CategoryResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CategoryResults.
     * @param {CategoryResultCreateManyArgs} args - Arguments to create many CategoryResults.
     * @example
     * // Create many CategoryResults
     * const categoryResult = await prisma.categoryResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryResultCreateManyArgs>(args?: SelectSubset<T, CategoryResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CategoryResult.
     * @param {CategoryResultDeleteArgs} args - Arguments to delete one CategoryResult.
     * @example
     * // Delete one CategoryResult
     * const CategoryResult = await prisma.categoryResult.delete({
     *   where: {
     *     // ... filter to delete one CategoryResult
     *   }
     * })
     * 
     */
    delete<T extends CategoryResultDeleteArgs>(args: SelectSubset<T, CategoryResultDeleteArgs<ExtArgs>>): Prisma__CategoryResultClient<$Result.GetResult<Prisma.$CategoryResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CategoryResult.
     * @param {CategoryResultUpdateArgs} args - Arguments to update one CategoryResult.
     * @example
     * // Update one CategoryResult
     * const categoryResult = await prisma.categoryResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryResultUpdateArgs>(args: SelectSubset<T, CategoryResultUpdateArgs<ExtArgs>>): Prisma__CategoryResultClient<$Result.GetResult<Prisma.$CategoryResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CategoryResults.
     * @param {CategoryResultDeleteManyArgs} args - Arguments to filter CategoryResults to delete.
     * @example
     * // Delete a few CategoryResults
     * const { count } = await prisma.categoryResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryResultDeleteManyArgs>(args?: SelectSubset<T, CategoryResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CategoryResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CategoryResults
     * const categoryResult = await prisma.categoryResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryResultUpdateManyArgs>(args: SelectSubset<T, CategoryResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CategoryResult.
     * @param {CategoryResultUpsertArgs} args - Arguments to update or create a CategoryResult.
     * @example
     * // Update or create a CategoryResult
     * const categoryResult = await prisma.categoryResult.upsert({
     *   create: {
     *     // ... data to create a CategoryResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CategoryResult we want to update
     *   }
     * })
     */
    upsert<T extends CategoryResultUpsertArgs>(args: SelectSubset<T, CategoryResultUpsertArgs<ExtArgs>>): Prisma__CategoryResultClient<$Result.GetResult<Prisma.$CategoryResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CategoryResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryResultCountArgs} args - Arguments to filter CategoryResults to count.
     * @example
     * // Count the number of CategoryResults
     * const count = await prisma.categoryResult.count({
     *   where: {
     *     // ... the filter for the CategoryResults we want to count
     *   }
     * })
    **/
    count<T extends CategoryResultCountArgs>(
      args?: Subset<T, CategoryResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CategoryResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryResultAggregateArgs>(args: Subset<T, CategoryResultAggregateArgs>): Prisma.PrismaPromise<GetCategoryResultAggregateType<T>>

    /**
     * Group by CategoryResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryResultGroupByArgs['orderBy'] }
        : { orderBy?: CategoryResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CategoryResult model
   */
  readonly fields: CategoryResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CategoryResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CategoryResult model
   */
  interface CategoryResultFieldRefs {
    readonly id: FieldRef<"CategoryResult", 'Int'>
    readonly user_id: FieldRef<"CategoryResult", 'String'>
    readonly name: FieldRef<"CategoryResult", 'String'>
    readonly gender: FieldRef<"CategoryResult", 'String'>
    readonly color: FieldRef<"CategoryResult", 'String'>
    readonly is_age_required: FieldRef<"CategoryResult", 'Boolean'>
    readonly min_age: FieldRef<"CategoryResult", 'Int'>
    readonly max_age: FieldRef<"CategoryResult", 'Int'>
    readonly min_systolic: FieldRef<"CategoryResult", 'Int'>
    readonly max_systolic: FieldRef<"CategoryResult", 'Int'>
    readonly min_diastolic: FieldRef<"CategoryResult", 'Int'>
    readonly max_diastolic: FieldRef<"CategoryResult", 'Int'>
    readonly description: FieldRef<"CategoryResult", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CategoryResult findUnique
   */
  export type CategoryResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryResult
     */
    select?: CategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryResult
     */
    omit?: CategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryResultInclude<ExtArgs> | null
    /**
     * Filter, which CategoryResult to fetch.
     */
    where: CategoryResultWhereUniqueInput
  }

  /**
   * CategoryResult findUniqueOrThrow
   */
  export type CategoryResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryResult
     */
    select?: CategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryResult
     */
    omit?: CategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryResultInclude<ExtArgs> | null
    /**
     * Filter, which CategoryResult to fetch.
     */
    where: CategoryResultWhereUniqueInput
  }

  /**
   * CategoryResult findFirst
   */
  export type CategoryResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryResult
     */
    select?: CategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryResult
     */
    omit?: CategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryResultInclude<ExtArgs> | null
    /**
     * Filter, which CategoryResult to fetch.
     */
    where?: CategoryResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryResults to fetch.
     */
    orderBy?: CategoryResultOrderByWithRelationInput | CategoryResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoryResults.
     */
    cursor?: CategoryResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoryResults.
     */
    distinct?: CategoryResultScalarFieldEnum | CategoryResultScalarFieldEnum[]
  }

  /**
   * CategoryResult findFirstOrThrow
   */
  export type CategoryResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryResult
     */
    select?: CategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryResult
     */
    omit?: CategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryResultInclude<ExtArgs> | null
    /**
     * Filter, which CategoryResult to fetch.
     */
    where?: CategoryResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryResults to fetch.
     */
    orderBy?: CategoryResultOrderByWithRelationInput | CategoryResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CategoryResults.
     */
    cursor?: CategoryResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CategoryResults.
     */
    distinct?: CategoryResultScalarFieldEnum | CategoryResultScalarFieldEnum[]
  }

  /**
   * CategoryResult findMany
   */
  export type CategoryResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryResult
     */
    select?: CategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryResult
     */
    omit?: CategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryResultInclude<ExtArgs> | null
    /**
     * Filter, which CategoryResults to fetch.
     */
    where?: CategoryResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CategoryResults to fetch.
     */
    orderBy?: CategoryResultOrderByWithRelationInput | CategoryResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CategoryResults.
     */
    cursor?: CategoryResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CategoryResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CategoryResults.
     */
    skip?: number
    distinct?: CategoryResultScalarFieldEnum | CategoryResultScalarFieldEnum[]
  }

  /**
   * CategoryResult create
   */
  export type CategoryResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryResult
     */
    select?: CategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryResult
     */
    omit?: CategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryResultInclude<ExtArgs> | null
    /**
     * The data needed to create a CategoryResult.
     */
    data: XOR<CategoryResultCreateInput, CategoryResultUncheckedCreateInput>
  }

  /**
   * CategoryResult createMany
   */
  export type CategoryResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CategoryResults.
     */
    data: CategoryResultCreateManyInput | CategoryResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CategoryResult update
   */
  export type CategoryResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryResult
     */
    select?: CategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryResult
     */
    omit?: CategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryResultInclude<ExtArgs> | null
    /**
     * The data needed to update a CategoryResult.
     */
    data: XOR<CategoryResultUpdateInput, CategoryResultUncheckedUpdateInput>
    /**
     * Choose, which CategoryResult to update.
     */
    where: CategoryResultWhereUniqueInput
  }

  /**
   * CategoryResult updateMany
   */
  export type CategoryResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CategoryResults.
     */
    data: XOR<CategoryResultUpdateManyMutationInput, CategoryResultUncheckedUpdateManyInput>
    /**
     * Filter which CategoryResults to update
     */
    where?: CategoryResultWhereInput
    /**
     * Limit how many CategoryResults to update.
     */
    limit?: number
  }

  /**
   * CategoryResult upsert
   */
  export type CategoryResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryResult
     */
    select?: CategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryResult
     */
    omit?: CategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryResultInclude<ExtArgs> | null
    /**
     * The filter to search for the CategoryResult to update in case it exists.
     */
    where: CategoryResultWhereUniqueInput
    /**
     * In case the CategoryResult found by the `where` argument doesn't exist, create a new CategoryResult with this data.
     */
    create: XOR<CategoryResultCreateInput, CategoryResultUncheckedCreateInput>
    /**
     * In case the CategoryResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryResultUpdateInput, CategoryResultUncheckedUpdateInput>
  }

  /**
   * CategoryResult delete
   */
  export type CategoryResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryResult
     */
    select?: CategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryResult
     */
    omit?: CategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryResultInclude<ExtArgs> | null
    /**
     * Filter which CategoryResult to delete.
     */
    where: CategoryResultWhereUniqueInput
  }

  /**
   * CategoryResult deleteMany
   */
  export type CategoryResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CategoryResults to delete
     */
    where?: CategoryResultWhereInput
    /**
     * Limit how many CategoryResults to delete.
     */
    limit?: number
  }

  /**
   * CategoryResult without action
   */
  export type CategoryResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryResult
     */
    select?: CategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CategoryResult
     */
    omit?: CategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryResultInclude<ExtArgs> | null
  }


  /**
   * Model DefaultCategoryResult
   */

  export type AggregateDefaultCategoryResult = {
    _count: DefaultCategoryResultCountAggregateOutputType | null
    _avg: DefaultCategoryResultAvgAggregateOutputType | null
    _sum: DefaultCategoryResultSumAggregateOutputType | null
    _min: DefaultCategoryResultMinAggregateOutputType | null
    _max: DefaultCategoryResultMaxAggregateOutputType | null
  }

  export type DefaultCategoryResultAvgAggregateOutputType = {
    id: number | null
    min_age: number | null
    max_age: number | null
    min_systolic: number | null
    max_systolic: number | null
    min_diastolic: number | null
    max_diastolic: number | null
  }

  export type DefaultCategoryResultSumAggregateOutputType = {
    id: number | null
    min_age: number | null
    max_age: number | null
    min_systolic: number | null
    max_systolic: number | null
    min_diastolic: number | null
    max_diastolic: number | null
  }

  export type DefaultCategoryResultMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    name: string | null
    gender: string | null
    color: string | null
    is_age_required: boolean | null
    min_age: number | null
    max_age: number | null
    min_systolic: number | null
    max_systolic: number | null
    min_diastolic: number | null
    max_diastolic: number | null
    description: string | null
  }

  export type DefaultCategoryResultMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    name: string | null
    gender: string | null
    color: string | null
    is_age_required: boolean | null
    min_age: number | null
    max_age: number | null
    min_systolic: number | null
    max_systolic: number | null
    min_diastolic: number | null
    max_diastolic: number | null
    description: string | null
  }

  export type DefaultCategoryResultCountAggregateOutputType = {
    id: number
    user_id: number
    name: number
    gender: number
    color: number
    is_age_required: number
    min_age: number
    max_age: number
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: number
    _all: number
  }


  export type DefaultCategoryResultAvgAggregateInputType = {
    id?: true
    min_age?: true
    max_age?: true
    min_systolic?: true
    max_systolic?: true
    min_diastolic?: true
    max_diastolic?: true
  }

  export type DefaultCategoryResultSumAggregateInputType = {
    id?: true
    min_age?: true
    max_age?: true
    min_systolic?: true
    max_systolic?: true
    min_diastolic?: true
    max_diastolic?: true
  }

  export type DefaultCategoryResultMinAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    gender?: true
    color?: true
    is_age_required?: true
    min_age?: true
    max_age?: true
    min_systolic?: true
    max_systolic?: true
    min_diastolic?: true
    max_diastolic?: true
    description?: true
  }

  export type DefaultCategoryResultMaxAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    gender?: true
    color?: true
    is_age_required?: true
    min_age?: true
    max_age?: true
    min_systolic?: true
    max_systolic?: true
    min_diastolic?: true
    max_diastolic?: true
    description?: true
  }

  export type DefaultCategoryResultCountAggregateInputType = {
    id?: true
    user_id?: true
    name?: true
    gender?: true
    color?: true
    is_age_required?: true
    min_age?: true
    max_age?: true
    min_systolic?: true
    max_systolic?: true
    min_diastolic?: true
    max_diastolic?: true
    description?: true
    _all?: true
  }

  export type DefaultCategoryResultAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DefaultCategoryResult to aggregate.
     */
    where?: DefaultCategoryResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefaultCategoryResults to fetch.
     */
    orderBy?: DefaultCategoryResultOrderByWithRelationInput | DefaultCategoryResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DefaultCategoryResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefaultCategoryResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefaultCategoryResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DefaultCategoryResults
    **/
    _count?: true | DefaultCategoryResultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DefaultCategoryResultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DefaultCategoryResultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DefaultCategoryResultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DefaultCategoryResultMaxAggregateInputType
  }

  export type GetDefaultCategoryResultAggregateType<T extends DefaultCategoryResultAggregateArgs> = {
        [P in keyof T & keyof AggregateDefaultCategoryResult]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDefaultCategoryResult[P]>
      : GetScalarType<T[P], AggregateDefaultCategoryResult[P]>
  }




  export type DefaultCategoryResultGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DefaultCategoryResultWhereInput
    orderBy?: DefaultCategoryResultOrderByWithAggregationInput | DefaultCategoryResultOrderByWithAggregationInput[]
    by: DefaultCategoryResultScalarFieldEnum[] | DefaultCategoryResultScalarFieldEnum
    having?: DefaultCategoryResultScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DefaultCategoryResultCountAggregateInputType | true
    _avg?: DefaultCategoryResultAvgAggregateInputType
    _sum?: DefaultCategoryResultSumAggregateInputType
    _min?: DefaultCategoryResultMinAggregateInputType
    _max?: DefaultCategoryResultMaxAggregateInputType
  }

  export type DefaultCategoryResultGroupByOutputType = {
    id: number
    user_id: string
    name: string
    gender: string
    color: string
    is_age_required: boolean
    min_age: number | null
    max_age: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
    _count: DefaultCategoryResultCountAggregateOutputType | null
    _avg: DefaultCategoryResultAvgAggregateOutputType | null
    _sum: DefaultCategoryResultSumAggregateOutputType | null
    _min: DefaultCategoryResultMinAggregateOutputType | null
    _max: DefaultCategoryResultMaxAggregateOutputType | null
  }

  type GetDefaultCategoryResultGroupByPayload<T extends DefaultCategoryResultGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DefaultCategoryResultGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DefaultCategoryResultGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DefaultCategoryResultGroupByOutputType[P]>
            : GetScalarType<T[P], DefaultCategoryResultGroupByOutputType[P]>
        }
      >
    >


  export type DefaultCategoryResultSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    name?: boolean
    gender?: boolean
    color?: boolean
    is_age_required?: boolean
    min_age?: boolean
    max_age?: boolean
    min_systolic?: boolean
    max_systolic?: boolean
    min_diastolic?: boolean
    max_diastolic?: boolean
    description?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["defaultCategoryResult"]>



  export type DefaultCategoryResultSelectScalar = {
    id?: boolean
    user_id?: boolean
    name?: boolean
    gender?: boolean
    color?: boolean
    is_age_required?: boolean
    min_age?: boolean
    max_age?: boolean
    min_systolic?: boolean
    max_systolic?: boolean
    min_diastolic?: boolean
    max_diastolic?: boolean
    description?: boolean
  }

  export type DefaultCategoryResultOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "name" | "gender" | "color" | "is_age_required" | "min_age" | "max_age" | "min_systolic" | "max_systolic" | "min_diastolic" | "max_diastolic" | "description", ExtArgs["result"]["defaultCategoryResult"]>
  export type DefaultCategoryResultInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DefaultCategoryResultPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DefaultCategoryResult"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      name: string
      gender: string
      color: string
      is_age_required: boolean
      min_age: number | null
      max_age: number | null
      min_systolic: number
      max_systolic: number
      min_diastolic: number
      max_diastolic: number
      description: string
    }, ExtArgs["result"]["defaultCategoryResult"]>
    composites: {}
  }

  type DefaultCategoryResultGetPayload<S extends boolean | null | undefined | DefaultCategoryResultDefaultArgs> = $Result.GetResult<Prisma.$DefaultCategoryResultPayload, S>

  type DefaultCategoryResultCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DefaultCategoryResultFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DefaultCategoryResultCountAggregateInputType | true
    }

  export interface DefaultCategoryResultDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DefaultCategoryResult'], meta: { name: 'DefaultCategoryResult' } }
    /**
     * Find zero or one DefaultCategoryResult that matches the filter.
     * @param {DefaultCategoryResultFindUniqueArgs} args - Arguments to find a DefaultCategoryResult
     * @example
     * // Get one DefaultCategoryResult
     * const defaultCategoryResult = await prisma.defaultCategoryResult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DefaultCategoryResultFindUniqueArgs>(args: SelectSubset<T, DefaultCategoryResultFindUniqueArgs<ExtArgs>>): Prisma__DefaultCategoryResultClient<$Result.GetResult<Prisma.$DefaultCategoryResultPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DefaultCategoryResult that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DefaultCategoryResultFindUniqueOrThrowArgs} args - Arguments to find a DefaultCategoryResult
     * @example
     * // Get one DefaultCategoryResult
     * const defaultCategoryResult = await prisma.defaultCategoryResult.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DefaultCategoryResultFindUniqueOrThrowArgs>(args: SelectSubset<T, DefaultCategoryResultFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DefaultCategoryResultClient<$Result.GetResult<Prisma.$DefaultCategoryResultPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DefaultCategoryResult that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefaultCategoryResultFindFirstArgs} args - Arguments to find a DefaultCategoryResult
     * @example
     * // Get one DefaultCategoryResult
     * const defaultCategoryResult = await prisma.defaultCategoryResult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DefaultCategoryResultFindFirstArgs>(args?: SelectSubset<T, DefaultCategoryResultFindFirstArgs<ExtArgs>>): Prisma__DefaultCategoryResultClient<$Result.GetResult<Prisma.$DefaultCategoryResultPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DefaultCategoryResult that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefaultCategoryResultFindFirstOrThrowArgs} args - Arguments to find a DefaultCategoryResult
     * @example
     * // Get one DefaultCategoryResult
     * const defaultCategoryResult = await prisma.defaultCategoryResult.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DefaultCategoryResultFindFirstOrThrowArgs>(args?: SelectSubset<T, DefaultCategoryResultFindFirstOrThrowArgs<ExtArgs>>): Prisma__DefaultCategoryResultClient<$Result.GetResult<Prisma.$DefaultCategoryResultPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DefaultCategoryResults that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefaultCategoryResultFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DefaultCategoryResults
     * const defaultCategoryResults = await prisma.defaultCategoryResult.findMany()
     * 
     * // Get first 10 DefaultCategoryResults
     * const defaultCategoryResults = await prisma.defaultCategoryResult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const defaultCategoryResultWithIdOnly = await prisma.defaultCategoryResult.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DefaultCategoryResultFindManyArgs>(args?: SelectSubset<T, DefaultCategoryResultFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DefaultCategoryResultPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DefaultCategoryResult.
     * @param {DefaultCategoryResultCreateArgs} args - Arguments to create a DefaultCategoryResult.
     * @example
     * // Create one DefaultCategoryResult
     * const DefaultCategoryResult = await prisma.defaultCategoryResult.create({
     *   data: {
     *     // ... data to create a DefaultCategoryResult
     *   }
     * })
     * 
     */
    create<T extends DefaultCategoryResultCreateArgs>(args: SelectSubset<T, DefaultCategoryResultCreateArgs<ExtArgs>>): Prisma__DefaultCategoryResultClient<$Result.GetResult<Prisma.$DefaultCategoryResultPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DefaultCategoryResults.
     * @param {DefaultCategoryResultCreateManyArgs} args - Arguments to create many DefaultCategoryResults.
     * @example
     * // Create many DefaultCategoryResults
     * const defaultCategoryResult = await prisma.defaultCategoryResult.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DefaultCategoryResultCreateManyArgs>(args?: SelectSubset<T, DefaultCategoryResultCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a DefaultCategoryResult.
     * @param {DefaultCategoryResultDeleteArgs} args - Arguments to delete one DefaultCategoryResult.
     * @example
     * // Delete one DefaultCategoryResult
     * const DefaultCategoryResult = await prisma.defaultCategoryResult.delete({
     *   where: {
     *     // ... filter to delete one DefaultCategoryResult
     *   }
     * })
     * 
     */
    delete<T extends DefaultCategoryResultDeleteArgs>(args: SelectSubset<T, DefaultCategoryResultDeleteArgs<ExtArgs>>): Prisma__DefaultCategoryResultClient<$Result.GetResult<Prisma.$DefaultCategoryResultPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DefaultCategoryResult.
     * @param {DefaultCategoryResultUpdateArgs} args - Arguments to update one DefaultCategoryResult.
     * @example
     * // Update one DefaultCategoryResult
     * const defaultCategoryResult = await prisma.defaultCategoryResult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DefaultCategoryResultUpdateArgs>(args: SelectSubset<T, DefaultCategoryResultUpdateArgs<ExtArgs>>): Prisma__DefaultCategoryResultClient<$Result.GetResult<Prisma.$DefaultCategoryResultPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DefaultCategoryResults.
     * @param {DefaultCategoryResultDeleteManyArgs} args - Arguments to filter DefaultCategoryResults to delete.
     * @example
     * // Delete a few DefaultCategoryResults
     * const { count } = await prisma.defaultCategoryResult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DefaultCategoryResultDeleteManyArgs>(args?: SelectSubset<T, DefaultCategoryResultDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DefaultCategoryResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefaultCategoryResultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DefaultCategoryResults
     * const defaultCategoryResult = await prisma.defaultCategoryResult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DefaultCategoryResultUpdateManyArgs>(args: SelectSubset<T, DefaultCategoryResultUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DefaultCategoryResult.
     * @param {DefaultCategoryResultUpsertArgs} args - Arguments to update or create a DefaultCategoryResult.
     * @example
     * // Update or create a DefaultCategoryResult
     * const defaultCategoryResult = await prisma.defaultCategoryResult.upsert({
     *   create: {
     *     // ... data to create a DefaultCategoryResult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DefaultCategoryResult we want to update
     *   }
     * })
     */
    upsert<T extends DefaultCategoryResultUpsertArgs>(args: SelectSubset<T, DefaultCategoryResultUpsertArgs<ExtArgs>>): Prisma__DefaultCategoryResultClient<$Result.GetResult<Prisma.$DefaultCategoryResultPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DefaultCategoryResults.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefaultCategoryResultCountArgs} args - Arguments to filter DefaultCategoryResults to count.
     * @example
     * // Count the number of DefaultCategoryResults
     * const count = await prisma.defaultCategoryResult.count({
     *   where: {
     *     // ... the filter for the DefaultCategoryResults we want to count
     *   }
     * })
    **/
    count<T extends DefaultCategoryResultCountArgs>(
      args?: Subset<T, DefaultCategoryResultCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DefaultCategoryResultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DefaultCategoryResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefaultCategoryResultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DefaultCategoryResultAggregateArgs>(args: Subset<T, DefaultCategoryResultAggregateArgs>): Prisma.PrismaPromise<GetDefaultCategoryResultAggregateType<T>>

    /**
     * Group by DefaultCategoryResult.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefaultCategoryResultGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DefaultCategoryResultGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DefaultCategoryResultGroupByArgs['orderBy'] }
        : { orderBy?: DefaultCategoryResultGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DefaultCategoryResultGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDefaultCategoryResultGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DefaultCategoryResult model
   */
  readonly fields: DefaultCategoryResultFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DefaultCategoryResult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DefaultCategoryResultClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DefaultCategoryResult model
   */
  interface DefaultCategoryResultFieldRefs {
    readonly id: FieldRef<"DefaultCategoryResult", 'Int'>
    readonly user_id: FieldRef<"DefaultCategoryResult", 'String'>
    readonly name: FieldRef<"DefaultCategoryResult", 'String'>
    readonly gender: FieldRef<"DefaultCategoryResult", 'String'>
    readonly color: FieldRef<"DefaultCategoryResult", 'String'>
    readonly is_age_required: FieldRef<"DefaultCategoryResult", 'Boolean'>
    readonly min_age: FieldRef<"DefaultCategoryResult", 'Int'>
    readonly max_age: FieldRef<"DefaultCategoryResult", 'Int'>
    readonly min_systolic: FieldRef<"DefaultCategoryResult", 'Int'>
    readonly max_systolic: FieldRef<"DefaultCategoryResult", 'Int'>
    readonly min_diastolic: FieldRef<"DefaultCategoryResult", 'Int'>
    readonly max_diastolic: FieldRef<"DefaultCategoryResult", 'Int'>
    readonly description: FieldRef<"DefaultCategoryResult", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DefaultCategoryResult findUnique
   */
  export type DefaultCategoryResultFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefaultCategoryResult
     */
    select?: DefaultCategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefaultCategoryResult
     */
    omit?: DefaultCategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DefaultCategoryResultInclude<ExtArgs> | null
    /**
     * Filter, which DefaultCategoryResult to fetch.
     */
    where: DefaultCategoryResultWhereUniqueInput
  }

  /**
   * DefaultCategoryResult findUniqueOrThrow
   */
  export type DefaultCategoryResultFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefaultCategoryResult
     */
    select?: DefaultCategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefaultCategoryResult
     */
    omit?: DefaultCategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DefaultCategoryResultInclude<ExtArgs> | null
    /**
     * Filter, which DefaultCategoryResult to fetch.
     */
    where: DefaultCategoryResultWhereUniqueInput
  }

  /**
   * DefaultCategoryResult findFirst
   */
  export type DefaultCategoryResultFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefaultCategoryResult
     */
    select?: DefaultCategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefaultCategoryResult
     */
    omit?: DefaultCategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DefaultCategoryResultInclude<ExtArgs> | null
    /**
     * Filter, which DefaultCategoryResult to fetch.
     */
    where?: DefaultCategoryResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefaultCategoryResults to fetch.
     */
    orderBy?: DefaultCategoryResultOrderByWithRelationInput | DefaultCategoryResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DefaultCategoryResults.
     */
    cursor?: DefaultCategoryResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefaultCategoryResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefaultCategoryResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DefaultCategoryResults.
     */
    distinct?: DefaultCategoryResultScalarFieldEnum | DefaultCategoryResultScalarFieldEnum[]
  }

  /**
   * DefaultCategoryResult findFirstOrThrow
   */
  export type DefaultCategoryResultFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefaultCategoryResult
     */
    select?: DefaultCategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefaultCategoryResult
     */
    omit?: DefaultCategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DefaultCategoryResultInclude<ExtArgs> | null
    /**
     * Filter, which DefaultCategoryResult to fetch.
     */
    where?: DefaultCategoryResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefaultCategoryResults to fetch.
     */
    orderBy?: DefaultCategoryResultOrderByWithRelationInput | DefaultCategoryResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DefaultCategoryResults.
     */
    cursor?: DefaultCategoryResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefaultCategoryResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefaultCategoryResults.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DefaultCategoryResults.
     */
    distinct?: DefaultCategoryResultScalarFieldEnum | DefaultCategoryResultScalarFieldEnum[]
  }

  /**
   * DefaultCategoryResult findMany
   */
  export type DefaultCategoryResultFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefaultCategoryResult
     */
    select?: DefaultCategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefaultCategoryResult
     */
    omit?: DefaultCategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DefaultCategoryResultInclude<ExtArgs> | null
    /**
     * Filter, which DefaultCategoryResults to fetch.
     */
    where?: DefaultCategoryResultWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefaultCategoryResults to fetch.
     */
    orderBy?: DefaultCategoryResultOrderByWithRelationInput | DefaultCategoryResultOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DefaultCategoryResults.
     */
    cursor?: DefaultCategoryResultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefaultCategoryResults from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefaultCategoryResults.
     */
    skip?: number
    distinct?: DefaultCategoryResultScalarFieldEnum | DefaultCategoryResultScalarFieldEnum[]
  }

  /**
   * DefaultCategoryResult create
   */
  export type DefaultCategoryResultCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefaultCategoryResult
     */
    select?: DefaultCategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefaultCategoryResult
     */
    omit?: DefaultCategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DefaultCategoryResultInclude<ExtArgs> | null
    /**
     * The data needed to create a DefaultCategoryResult.
     */
    data: XOR<DefaultCategoryResultCreateInput, DefaultCategoryResultUncheckedCreateInput>
  }

  /**
   * DefaultCategoryResult createMany
   */
  export type DefaultCategoryResultCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DefaultCategoryResults.
     */
    data: DefaultCategoryResultCreateManyInput | DefaultCategoryResultCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DefaultCategoryResult update
   */
  export type DefaultCategoryResultUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefaultCategoryResult
     */
    select?: DefaultCategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefaultCategoryResult
     */
    omit?: DefaultCategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DefaultCategoryResultInclude<ExtArgs> | null
    /**
     * The data needed to update a DefaultCategoryResult.
     */
    data: XOR<DefaultCategoryResultUpdateInput, DefaultCategoryResultUncheckedUpdateInput>
    /**
     * Choose, which DefaultCategoryResult to update.
     */
    where: DefaultCategoryResultWhereUniqueInput
  }

  /**
   * DefaultCategoryResult updateMany
   */
  export type DefaultCategoryResultUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DefaultCategoryResults.
     */
    data: XOR<DefaultCategoryResultUpdateManyMutationInput, DefaultCategoryResultUncheckedUpdateManyInput>
    /**
     * Filter which DefaultCategoryResults to update
     */
    where?: DefaultCategoryResultWhereInput
    /**
     * Limit how many DefaultCategoryResults to update.
     */
    limit?: number
  }

  /**
   * DefaultCategoryResult upsert
   */
  export type DefaultCategoryResultUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefaultCategoryResult
     */
    select?: DefaultCategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefaultCategoryResult
     */
    omit?: DefaultCategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DefaultCategoryResultInclude<ExtArgs> | null
    /**
     * The filter to search for the DefaultCategoryResult to update in case it exists.
     */
    where: DefaultCategoryResultWhereUniqueInput
    /**
     * In case the DefaultCategoryResult found by the `where` argument doesn't exist, create a new DefaultCategoryResult with this data.
     */
    create: XOR<DefaultCategoryResultCreateInput, DefaultCategoryResultUncheckedCreateInput>
    /**
     * In case the DefaultCategoryResult was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DefaultCategoryResultUpdateInput, DefaultCategoryResultUncheckedUpdateInput>
  }

  /**
   * DefaultCategoryResult delete
   */
  export type DefaultCategoryResultDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefaultCategoryResult
     */
    select?: DefaultCategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefaultCategoryResult
     */
    omit?: DefaultCategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DefaultCategoryResultInclude<ExtArgs> | null
    /**
     * Filter which DefaultCategoryResult to delete.
     */
    where: DefaultCategoryResultWhereUniqueInput
  }

  /**
   * DefaultCategoryResult deleteMany
   */
  export type DefaultCategoryResultDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DefaultCategoryResults to delete
     */
    where?: DefaultCategoryResultWhereInput
    /**
     * Limit how many DefaultCategoryResults to delete.
     */
    limit?: number
  }

  /**
   * DefaultCategoryResult without action
   */
  export type DefaultCategoryResultDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefaultCategoryResult
     */
    select?: DefaultCategoryResultSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefaultCategoryResult
     */
    omit?: DefaultCategoryResultOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DefaultCategoryResultInclude<ExtArgs> | null
  }


  /**
   * Model ProfilePicture
   */

  export type AggregateProfilePicture = {
    _count: ProfilePictureCountAggregateOutputType | null
    _avg: ProfilePictureAvgAggregateOutputType | null
    _sum: ProfilePictureSumAggregateOutputType | null
    _min: ProfilePictureMinAggregateOutputType | null
    _max: ProfilePictureMaxAggregateOutputType | null
  }

  export type ProfilePictureAvgAggregateOutputType = {
    id: number | null
  }

  export type ProfilePictureSumAggregateOutputType = {
    id: number | null
  }

  export type ProfilePictureMinAggregateOutputType = {
    id: number | null
    user_id: string | null
    path: string | null
  }

  export type ProfilePictureMaxAggregateOutputType = {
    id: number | null
    user_id: string | null
    path: string | null
  }

  export type ProfilePictureCountAggregateOutputType = {
    id: number
    user_id: number
    path: number
    _all: number
  }


  export type ProfilePictureAvgAggregateInputType = {
    id?: true
  }

  export type ProfilePictureSumAggregateInputType = {
    id?: true
  }

  export type ProfilePictureMinAggregateInputType = {
    id?: true
    user_id?: true
    path?: true
  }

  export type ProfilePictureMaxAggregateInputType = {
    id?: true
    user_id?: true
    path?: true
  }

  export type ProfilePictureCountAggregateInputType = {
    id?: true
    user_id?: true
    path?: true
    _all?: true
  }

  export type ProfilePictureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilePicture to aggregate.
     */
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     */
    orderBy?: ProfilePictureOrderByWithRelationInput | ProfilePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProfilePictures
    **/
    _count?: true | ProfilePictureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProfilePictureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProfilePictureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfilePictureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfilePictureMaxAggregateInputType
  }

  export type GetProfilePictureAggregateType<T extends ProfilePictureAggregateArgs> = {
        [P in keyof T & keyof AggregateProfilePicture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfilePicture[P]>
      : GetScalarType<T[P], AggregateProfilePicture[P]>
  }




  export type ProfilePictureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfilePictureWhereInput
    orderBy?: ProfilePictureOrderByWithAggregationInput | ProfilePictureOrderByWithAggregationInput[]
    by: ProfilePictureScalarFieldEnum[] | ProfilePictureScalarFieldEnum
    having?: ProfilePictureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfilePictureCountAggregateInputType | true
    _avg?: ProfilePictureAvgAggregateInputType
    _sum?: ProfilePictureSumAggregateInputType
    _min?: ProfilePictureMinAggregateInputType
    _max?: ProfilePictureMaxAggregateInputType
  }

  export type ProfilePictureGroupByOutputType = {
    id: number
    user_id: string
    path: string
    _count: ProfilePictureCountAggregateOutputType | null
    _avg: ProfilePictureAvgAggregateOutputType | null
    _sum: ProfilePictureSumAggregateOutputType | null
    _min: ProfilePictureMinAggregateOutputType | null
    _max: ProfilePictureMaxAggregateOutputType | null
  }

  type GetProfilePictureGroupByPayload<T extends ProfilePictureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfilePictureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfilePictureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfilePictureGroupByOutputType[P]>
            : GetScalarType<T[P], ProfilePictureGroupByOutputType[P]>
        }
      >
    >


  export type ProfilePictureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    user_id?: boolean
    path?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profilePicture"]>



  export type ProfilePictureSelectScalar = {
    id?: boolean
    user_id?: boolean
    path?: boolean
  }

  export type ProfilePictureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "user_id" | "path", ExtArgs["result"]["profilePicture"]>
  export type ProfilePictureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProfilePicturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProfilePicture"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      user_id: string
      path: string
    }, ExtArgs["result"]["profilePicture"]>
    composites: {}
  }

  type ProfilePictureGetPayload<S extends boolean | null | undefined | ProfilePictureDefaultArgs> = $Result.GetResult<Prisma.$ProfilePicturePayload, S>

  type ProfilePictureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfilePictureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfilePictureCountAggregateInputType | true
    }

  export interface ProfilePictureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProfilePicture'], meta: { name: 'ProfilePicture' } }
    /**
     * Find zero or one ProfilePicture that matches the filter.
     * @param {ProfilePictureFindUniqueArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfilePictureFindUniqueArgs>(args: SelectSubset<T, ProfilePictureFindUniqueArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProfilePicture that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfilePictureFindUniqueOrThrowArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfilePictureFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfilePictureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfilePicture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureFindFirstArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfilePictureFindFirstArgs>(args?: SelectSubset<T, ProfilePictureFindFirstArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProfilePicture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureFindFirstOrThrowArgs} args - Arguments to find a ProfilePicture
     * @example
     * // Get one ProfilePicture
     * const profilePicture = await prisma.profilePicture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfilePictureFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfilePictureFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProfilePictures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProfilePictures
     * const profilePictures = await prisma.profilePicture.findMany()
     * 
     * // Get first 10 ProfilePictures
     * const profilePictures = await prisma.profilePicture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profilePictureWithIdOnly = await prisma.profilePicture.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfilePictureFindManyArgs>(args?: SelectSubset<T, ProfilePictureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProfilePicture.
     * @param {ProfilePictureCreateArgs} args - Arguments to create a ProfilePicture.
     * @example
     * // Create one ProfilePicture
     * const ProfilePicture = await prisma.profilePicture.create({
     *   data: {
     *     // ... data to create a ProfilePicture
     *   }
     * })
     * 
     */
    create<T extends ProfilePictureCreateArgs>(args: SelectSubset<T, ProfilePictureCreateArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProfilePictures.
     * @param {ProfilePictureCreateManyArgs} args - Arguments to create many ProfilePictures.
     * @example
     * // Create many ProfilePictures
     * const profilePicture = await prisma.profilePicture.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfilePictureCreateManyArgs>(args?: SelectSubset<T, ProfilePictureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProfilePicture.
     * @param {ProfilePictureDeleteArgs} args - Arguments to delete one ProfilePicture.
     * @example
     * // Delete one ProfilePicture
     * const ProfilePicture = await prisma.profilePicture.delete({
     *   where: {
     *     // ... filter to delete one ProfilePicture
     *   }
     * })
     * 
     */
    delete<T extends ProfilePictureDeleteArgs>(args: SelectSubset<T, ProfilePictureDeleteArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProfilePicture.
     * @param {ProfilePictureUpdateArgs} args - Arguments to update one ProfilePicture.
     * @example
     * // Update one ProfilePicture
     * const profilePicture = await prisma.profilePicture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfilePictureUpdateArgs>(args: SelectSubset<T, ProfilePictureUpdateArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProfilePictures.
     * @param {ProfilePictureDeleteManyArgs} args - Arguments to filter ProfilePictures to delete.
     * @example
     * // Delete a few ProfilePictures
     * const { count } = await prisma.profilePicture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfilePictureDeleteManyArgs>(args?: SelectSubset<T, ProfilePictureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProfilePictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProfilePictures
     * const profilePicture = await prisma.profilePicture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfilePictureUpdateManyArgs>(args: SelectSubset<T, ProfilePictureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProfilePicture.
     * @param {ProfilePictureUpsertArgs} args - Arguments to update or create a ProfilePicture.
     * @example
     * // Update or create a ProfilePicture
     * const profilePicture = await prisma.profilePicture.upsert({
     *   create: {
     *     // ... data to create a ProfilePicture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProfilePicture we want to update
     *   }
     * })
     */
    upsert<T extends ProfilePictureUpsertArgs>(args: SelectSubset<T, ProfilePictureUpsertArgs<ExtArgs>>): Prisma__ProfilePictureClient<$Result.GetResult<Prisma.$ProfilePicturePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProfilePictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureCountArgs} args - Arguments to filter ProfilePictures to count.
     * @example
     * // Count the number of ProfilePictures
     * const count = await prisma.profilePicture.count({
     *   where: {
     *     // ... the filter for the ProfilePictures we want to count
     *   }
     * })
    **/
    count<T extends ProfilePictureCountArgs>(
      args?: Subset<T, ProfilePictureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfilePictureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProfilePicture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfilePictureAggregateArgs>(args: Subset<T, ProfilePictureAggregateArgs>): Prisma.PrismaPromise<GetProfilePictureAggregateType<T>>

    /**
     * Group by ProfilePicture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfilePictureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfilePictureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfilePictureGroupByArgs['orderBy'] }
        : { orderBy?: ProfilePictureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfilePictureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfilePictureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProfilePicture model
   */
  readonly fields: ProfilePictureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProfilePicture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfilePictureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProfilePicture model
   */
  interface ProfilePictureFieldRefs {
    readonly id: FieldRef<"ProfilePicture", 'Int'>
    readonly user_id: FieldRef<"ProfilePicture", 'String'>
    readonly path: FieldRef<"ProfilePicture", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProfilePicture findUnique
   */
  export type ProfilePictureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePicture to fetch.
     */
    where: ProfilePictureWhereUniqueInput
  }

  /**
   * ProfilePicture findUniqueOrThrow
   */
  export type ProfilePictureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePicture to fetch.
     */
    where: ProfilePictureWhereUniqueInput
  }

  /**
   * ProfilePicture findFirst
   */
  export type ProfilePictureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePicture to fetch.
     */
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     */
    orderBy?: ProfilePictureOrderByWithRelationInput | ProfilePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilePictures.
     */
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilePictures.
     */
    distinct?: ProfilePictureScalarFieldEnum | ProfilePictureScalarFieldEnum[]
  }

  /**
   * ProfilePicture findFirstOrThrow
   */
  export type ProfilePictureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePicture to fetch.
     */
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     */
    orderBy?: ProfilePictureOrderByWithRelationInput | ProfilePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProfilePictures.
     */
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProfilePictures.
     */
    distinct?: ProfilePictureScalarFieldEnum | ProfilePictureScalarFieldEnum[]
  }

  /**
   * ProfilePicture findMany
   */
  export type ProfilePictureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter, which ProfilePictures to fetch.
     */
    where?: ProfilePictureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProfilePictures to fetch.
     */
    orderBy?: ProfilePictureOrderByWithRelationInput | ProfilePictureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProfilePictures.
     */
    cursor?: ProfilePictureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProfilePictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProfilePictures.
     */
    skip?: number
    distinct?: ProfilePictureScalarFieldEnum | ProfilePictureScalarFieldEnum[]
  }

  /**
   * ProfilePicture create
   */
  export type ProfilePictureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * The data needed to create a ProfilePicture.
     */
    data: XOR<ProfilePictureCreateInput, ProfilePictureUncheckedCreateInput>
  }

  /**
   * ProfilePicture createMany
   */
  export type ProfilePictureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProfilePictures.
     */
    data: ProfilePictureCreateManyInput | ProfilePictureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProfilePicture update
   */
  export type ProfilePictureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * The data needed to update a ProfilePicture.
     */
    data: XOR<ProfilePictureUpdateInput, ProfilePictureUncheckedUpdateInput>
    /**
     * Choose, which ProfilePicture to update.
     */
    where: ProfilePictureWhereUniqueInput
  }

  /**
   * ProfilePicture updateMany
   */
  export type ProfilePictureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProfilePictures.
     */
    data: XOR<ProfilePictureUpdateManyMutationInput, ProfilePictureUncheckedUpdateManyInput>
    /**
     * Filter which ProfilePictures to update
     */
    where?: ProfilePictureWhereInput
    /**
     * Limit how many ProfilePictures to update.
     */
    limit?: number
  }

  /**
   * ProfilePicture upsert
   */
  export type ProfilePictureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * The filter to search for the ProfilePicture to update in case it exists.
     */
    where: ProfilePictureWhereUniqueInput
    /**
     * In case the ProfilePicture found by the `where` argument doesn't exist, create a new ProfilePicture with this data.
     */
    create: XOR<ProfilePictureCreateInput, ProfilePictureUncheckedCreateInput>
    /**
     * In case the ProfilePicture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfilePictureUpdateInput, ProfilePictureUncheckedUpdateInput>
  }

  /**
   * ProfilePicture delete
   */
  export type ProfilePictureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
    /**
     * Filter which ProfilePicture to delete.
     */
    where: ProfilePictureWhereUniqueInput
  }

  /**
   * ProfilePicture deleteMany
   */
  export type ProfilePictureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProfilePictures to delete
     */
    where?: ProfilePictureWhereInput
    /**
     * Limit how many ProfilePictures to delete.
     */
    limit?: number
  }

  /**
   * ProfilePicture without action
   */
  export type ProfilePictureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProfilePicture
     */
    select?: ProfilePictureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProfilePicture
     */
    omit?: ProfilePictureOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfilePictureInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    name: 'name',
    token: 'token'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MeasurementScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    systolic: 'systolic',
    diastolic: 'diastolic',
    mean: 'mean',
    heart_rate: 'heart_rate',
    timestamp: 'timestamp'
  };

  export type MeasurementScalarFieldEnum = (typeof MeasurementScalarFieldEnum)[keyof typeof MeasurementScalarFieldEnum]


  export const PatientScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    name: 'name',
    gender: 'gender',
    phone: 'phone',
    work: 'work',
    last_education: 'last_education',
    place_of_birth: 'place_of_birth',
    date_of_birth: 'date_of_birth'
  };

  export type PatientScalarFieldEnum = (typeof PatientScalarFieldEnum)[keyof typeof PatientScalarFieldEnum]


  export const PatientMeasurementScalarFieldEnum: {
    id: 'id',
    patient_id: 'patient_id',
    user_id: 'user_id',
    weight: 'weight',
    systolic: 'systolic',
    diastolic: 'diastolic',
    mean: 'mean',
    heart_rate: 'heart_rate',
    category_result: 'category_result',
    category_color: 'category_color',
    timestamp: 'timestamp'
  };

  export type PatientMeasurementScalarFieldEnum = (typeof PatientMeasurementScalarFieldEnum)[keyof typeof PatientMeasurementScalarFieldEnum]


  export const CategoryResultScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    name: 'name',
    gender: 'gender',
    color: 'color',
    is_age_required: 'is_age_required',
    min_age: 'min_age',
    max_age: 'max_age',
    min_systolic: 'min_systolic',
    max_systolic: 'max_systolic',
    min_diastolic: 'min_diastolic',
    max_diastolic: 'max_diastolic',
    description: 'description'
  };

  export type CategoryResultScalarFieldEnum = (typeof CategoryResultScalarFieldEnum)[keyof typeof CategoryResultScalarFieldEnum]


  export const DefaultCategoryResultScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    name: 'name',
    gender: 'gender',
    color: 'color',
    is_age_required: 'is_age_required',
    min_age: 'min_age',
    max_age: 'max_age',
    min_systolic: 'min_systolic',
    max_systolic: 'max_systolic',
    min_diastolic: 'min_diastolic',
    max_diastolic: 'max_diastolic',
    description: 'description'
  };

  export type DefaultCategoryResultScalarFieldEnum = (typeof DefaultCategoryResultScalarFieldEnum)[keyof typeof DefaultCategoryResultScalarFieldEnum]


  export const ProfilePictureScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    path: 'path'
  };

  export type ProfilePictureScalarFieldEnum = (typeof ProfilePictureScalarFieldEnum)[keyof typeof ProfilePictureScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    name: 'name',
    token: 'token'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const MeasurementOrderByRelevanceFieldEnum: {
    user_id: 'user_id'
  };

  export type MeasurementOrderByRelevanceFieldEnum = (typeof MeasurementOrderByRelevanceFieldEnum)[keyof typeof MeasurementOrderByRelevanceFieldEnum]


  export const PatientOrderByRelevanceFieldEnum: {
    user_id: 'user_id',
    name: 'name',
    phone: 'phone',
    work: 'work',
    last_education: 'last_education',
    place_of_birth: 'place_of_birth'
  };

  export type PatientOrderByRelevanceFieldEnum = (typeof PatientOrderByRelevanceFieldEnum)[keyof typeof PatientOrderByRelevanceFieldEnum]


  export const PatientMeasurementOrderByRelevanceFieldEnum: {
    user_id: 'user_id',
    category_result: 'category_result',
    category_color: 'category_color'
  };

  export type PatientMeasurementOrderByRelevanceFieldEnum = (typeof PatientMeasurementOrderByRelevanceFieldEnum)[keyof typeof PatientMeasurementOrderByRelevanceFieldEnum]


  export const CategoryResultOrderByRelevanceFieldEnum: {
    user_id: 'user_id',
    name: 'name',
    gender: 'gender',
    color: 'color',
    description: 'description'
  };

  export type CategoryResultOrderByRelevanceFieldEnum = (typeof CategoryResultOrderByRelevanceFieldEnum)[keyof typeof CategoryResultOrderByRelevanceFieldEnum]


  export const DefaultCategoryResultOrderByRelevanceFieldEnum: {
    user_id: 'user_id',
    name: 'name',
    gender: 'gender',
    color: 'color',
    description: 'description'
  };

  export type DefaultCategoryResultOrderByRelevanceFieldEnum = (typeof DefaultCategoryResultOrderByRelevanceFieldEnum)[keyof typeof DefaultCategoryResultOrderByRelevanceFieldEnum]


  export const ProfilePictureOrderByRelevanceFieldEnum: {
    user_id: 'user_id',
    path: 'path'
  };

  export type ProfilePictureOrderByRelevanceFieldEnum = (typeof ProfilePictureOrderByRelevanceFieldEnum)[keyof typeof ProfilePictureOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    token?: StringNullableFilter<"User"> | string | null
    patient?: PatientListRelationFilter
    category_result?: CategoryResultListRelationFilter
    default_category_result?: DefaultCategoryResultListRelationFilter
    patient_measurement?: PatientMeasurementListRelationFilter
    profile_picture?: ProfilePictureListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    token?: SortOrderInput | SortOrder
    patient?: PatientOrderByRelationAggregateInput
    category_result?: CategoryResultOrderByRelationAggregateInput
    default_category_result?: DefaultCategoryResultOrderByRelationAggregateInput
    patient_measurement?: PatientMeasurementOrderByRelationAggregateInput
    profile_picture?: ProfilePictureOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    token?: StringNullableFilter<"User"> | string | null
    patient?: PatientListRelationFilter
    category_result?: CategoryResultListRelationFilter
    default_category_result?: DefaultCategoryResultListRelationFilter
    patient_measurement?: PatientMeasurementListRelationFilter
    profile_picture?: ProfilePictureListRelationFilter
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    token?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    token?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type MeasurementWhereInput = {
    AND?: MeasurementWhereInput | MeasurementWhereInput[]
    OR?: MeasurementWhereInput[]
    NOT?: MeasurementWhereInput | MeasurementWhereInput[]
    id?: IntFilter<"Measurement"> | number
    user_id?: StringFilter<"Measurement"> | string
    systolic?: FloatFilter<"Measurement"> | number
    diastolic?: FloatFilter<"Measurement"> | number
    mean?: FloatFilter<"Measurement"> | number
    heart_rate?: FloatFilter<"Measurement"> | number
    timestamp?: DateTimeFilter<"Measurement"> | Date | string
  }

  export type MeasurementOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
    timestamp?: SortOrder
    _relevance?: MeasurementOrderByRelevanceInput
  }

  export type MeasurementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    user_id?: string
    AND?: MeasurementWhereInput | MeasurementWhereInput[]
    OR?: MeasurementWhereInput[]
    NOT?: MeasurementWhereInput | MeasurementWhereInput[]
    systolic?: FloatFilter<"Measurement"> | number
    diastolic?: FloatFilter<"Measurement"> | number
    mean?: FloatFilter<"Measurement"> | number
    heart_rate?: FloatFilter<"Measurement"> | number
    timestamp?: DateTimeFilter<"Measurement"> | Date | string
  }, "id" | "user_id">

  export type MeasurementOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
    timestamp?: SortOrder
    _count?: MeasurementCountOrderByAggregateInput
    _avg?: MeasurementAvgOrderByAggregateInput
    _max?: MeasurementMaxOrderByAggregateInput
    _min?: MeasurementMinOrderByAggregateInput
    _sum?: MeasurementSumOrderByAggregateInput
  }

  export type MeasurementScalarWhereWithAggregatesInput = {
    AND?: MeasurementScalarWhereWithAggregatesInput | MeasurementScalarWhereWithAggregatesInput[]
    OR?: MeasurementScalarWhereWithAggregatesInput[]
    NOT?: MeasurementScalarWhereWithAggregatesInput | MeasurementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Measurement"> | number
    user_id?: StringWithAggregatesFilter<"Measurement"> | string
    systolic?: FloatWithAggregatesFilter<"Measurement"> | number
    diastolic?: FloatWithAggregatesFilter<"Measurement"> | number
    mean?: FloatWithAggregatesFilter<"Measurement"> | number
    heart_rate?: FloatWithAggregatesFilter<"Measurement"> | number
    timestamp?: DateTimeWithAggregatesFilter<"Measurement"> | Date | string
  }

  export type PatientWhereInput = {
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    id?: IntFilter<"Patient"> | number
    user_id?: StringFilter<"Patient"> | string
    name?: StringFilter<"Patient"> | string
    gender?: EnumGenderFilter<"Patient"> | $Enums.Gender
    phone?: StringFilter<"Patient"> | string
    work?: StringFilter<"Patient"> | string
    last_education?: StringFilter<"Patient"> | string
    place_of_birth?: StringFilter<"Patient"> | string
    date_of_birth?: DateTimeFilter<"Patient"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    patient_measurement?: PatientMeasurementListRelationFilter
  }

  export type PatientOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    work?: SortOrder
    last_education?: SortOrder
    place_of_birth?: SortOrder
    date_of_birth?: SortOrder
    user?: UserOrderByWithRelationInput
    patient_measurement?: PatientMeasurementOrderByRelationAggregateInput
    _relevance?: PatientOrderByRelevanceInput
  }

  export type PatientWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatientWhereInput | PatientWhereInput[]
    OR?: PatientWhereInput[]
    NOT?: PatientWhereInput | PatientWhereInput[]
    user_id?: StringFilter<"Patient"> | string
    name?: StringFilter<"Patient"> | string
    gender?: EnumGenderFilter<"Patient"> | $Enums.Gender
    phone?: StringFilter<"Patient"> | string
    work?: StringFilter<"Patient"> | string
    last_education?: StringFilter<"Patient"> | string
    place_of_birth?: StringFilter<"Patient"> | string
    date_of_birth?: DateTimeFilter<"Patient"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    patient_measurement?: PatientMeasurementListRelationFilter
  }, "id">

  export type PatientOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    work?: SortOrder
    last_education?: SortOrder
    place_of_birth?: SortOrder
    date_of_birth?: SortOrder
    _count?: PatientCountOrderByAggregateInput
    _avg?: PatientAvgOrderByAggregateInput
    _max?: PatientMaxOrderByAggregateInput
    _min?: PatientMinOrderByAggregateInput
    _sum?: PatientSumOrderByAggregateInput
  }

  export type PatientScalarWhereWithAggregatesInput = {
    AND?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    OR?: PatientScalarWhereWithAggregatesInput[]
    NOT?: PatientScalarWhereWithAggregatesInput | PatientScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Patient"> | number
    user_id?: StringWithAggregatesFilter<"Patient"> | string
    name?: StringWithAggregatesFilter<"Patient"> | string
    gender?: EnumGenderWithAggregatesFilter<"Patient"> | $Enums.Gender
    phone?: StringWithAggregatesFilter<"Patient"> | string
    work?: StringWithAggregatesFilter<"Patient"> | string
    last_education?: StringWithAggregatesFilter<"Patient"> | string
    place_of_birth?: StringWithAggregatesFilter<"Patient"> | string
    date_of_birth?: DateTimeWithAggregatesFilter<"Patient"> | Date | string
  }

  export type PatientMeasurementWhereInput = {
    AND?: PatientMeasurementWhereInput | PatientMeasurementWhereInput[]
    OR?: PatientMeasurementWhereInput[]
    NOT?: PatientMeasurementWhereInput | PatientMeasurementWhereInput[]
    id?: IntFilter<"PatientMeasurement"> | number
    patient_id?: IntFilter<"PatientMeasurement"> | number
    user_id?: StringFilter<"PatientMeasurement"> | string
    weight?: FloatFilter<"PatientMeasurement"> | number
    systolic?: FloatFilter<"PatientMeasurement"> | number
    diastolic?: FloatFilter<"PatientMeasurement"> | number
    mean?: FloatFilter<"PatientMeasurement"> | number
    heart_rate?: FloatFilter<"PatientMeasurement"> | number
    category_result?: StringNullableFilter<"PatientMeasurement"> | string | null
    category_color?: StringNullableFilter<"PatientMeasurement"> | string | null
    timestamp?: DateTimeFilter<"PatientMeasurement"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PatientMeasurementOrderByWithRelationInput = {
    id?: SortOrder
    patient_id?: SortOrder
    user_id?: SortOrder
    weight?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
    category_result?: SortOrderInput | SortOrder
    category_color?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    patient?: PatientOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    _relevance?: PatientMeasurementOrderByRelevanceInput
  }

  export type PatientMeasurementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PatientMeasurementWhereInput | PatientMeasurementWhereInput[]
    OR?: PatientMeasurementWhereInput[]
    NOT?: PatientMeasurementWhereInput | PatientMeasurementWhereInput[]
    patient_id?: IntFilter<"PatientMeasurement"> | number
    user_id?: StringFilter<"PatientMeasurement"> | string
    weight?: FloatFilter<"PatientMeasurement"> | number
    systolic?: FloatFilter<"PatientMeasurement"> | number
    diastolic?: FloatFilter<"PatientMeasurement"> | number
    mean?: FloatFilter<"PatientMeasurement"> | number
    heart_rate?: FloatFilter<"PatientMeasurement"> | number
    category_result?: StringNullableFilter<"PatientMeasurement"> | string | null
    category_color?: StringNullableFilter<"PatientMeasurement"> | string | null
    timestamp?: DateTimeFilter<"PatientMeasurement"> | Date | string
    patient?: XOR<PatientScalarRelationFilter, PatientWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PatientMeasurementOrderByWithAggregationInput = {
    id?: SortOrder
    patient_id?: SortOrder
    user_id?: SortOrder
    weight?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
    category_result?: SortOrderInput | SortOrder
    category_color?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: PatientMeasurementCountOrderByAggregateInput
    _avg?: PatientMeasurementAvgOrderByAggregateInput
    _max?: PatientMeasurementMaxOrderByAggregateInput
    _min?: PatientMeasurementMinOrderByAggregateInput
    _sum?: PatientMeasurementSumOrderByAggregateInput
  }

  export type PatientMeasurementScalarWhereWithAggregatesInput = {
    AND?: PatientMeasurementScalarWhereWithAggregatesInput | PatientMeasurementScalarWhereWithAggregatesInput[]
    OR?: PatientMeasurementScalarWhereWithAggregatesInput[]
    NOT?: PatientMeasurementScalarWhereWithAggregatesInput | PatientMeasurementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PatientMeasurement"> | number
    patient_id?: IntWithAggregatesFilter<"PatientMeasurement"> | number
    user_id?: StringWithAggregatesFilter<"PatientMeasurement"> | string
    weight?: FloatWithAggregatesFilter<"PatientMeasurement"> | number
    systolic?: FloatWithAggregatesFilter<"PatientMeasurement"> | number
    diastolic?: FloatWithAggregatesFilter<"PatientMeasurement"> | number
    mean?: FloatWithAggregatesFilter<"PatientMeasurement"> | number
    heart_rate?: FloatWithAggregatesFilter<"PatientMeasurement"> | number
    category_result?: StringNullableWithAggregatesFilter<"PatientMeasurement"> | string | null
    category_color?: StringNullableWithAggregatesFilter<"PatientMeasurement"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"PatientMeasurement"> | Date | string
  }

  export type CategoryResultWhereInput = {
    AND?: CategoryResultWhereInput | CategoryResultWhereInput[]
    OR?: CategoryResultWhereInput[]
    NOT?: CategoryResultWhereInput | CategoryResultWhereInput[]
    id?: IntFilter<"CategoryResult"> | number
    user_id?: StringFilter<"CategoryResult"> | string
    name?: StringFilter<"CategoryResult"> | string
    gender?: StringFilter<"CategoryResult"> | string
    color?: StringFilter<"CategoryResult"> | string
    is_age_required?: BoolFilter<"CategoryResult"> | boolean
    min_age?: IntNullableFilter<"CategoryResult"> | number | null
    max_age?: IntNullableFilter<"CategoryResult"> | number | null
    min_systolic?: IntFilter<"CategoryResult"> | number
    max_systolic?: IntFilter<"CategoryResult"> | number
    min_diastolic?: IntFilter<"CategoryResult"> | number
    max_diastolic?: IntFilter<"CategoryResult"> | number
    description?: StringFilter<"CategoryResult"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type CategoryResultOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    color?: SortOrder
    is_age_required?: SortOrder
    min_age?: SortOrderInput | SortOrder
    max_age?: SortOrderInput | SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
    description?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: CategoryResultOrderByRelevanceInput
  }

  export type CategoryResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    gender_min_age_max_age_min_systolic_max_systolic_min_diastolic_max_diastolic?: CategoryResultGenderMin_ageMax_ageMin_systolicMax_systolicMin_diastolicMax_diastolicCompoundUniqueInput
    AND?: CategoryResultWhereInput | CategoryResultWhereInput[]
    OR?: CategoryResultWhereInput[]
    NOT?: CategoryResultWhereInput | CategoryResultWhereInput[]
    user_id?: StringFilter<"CategoryResult"> | string
    name?: StringFilter<"CategoryResult"> | string
    gender?: StringFilter<"CategoryResult"> | string
    color?: StringFilter<"CategoryResult"> | string
    is_age_required?: BoolFilter<"CategoryResult"> | boolean
    min_age?: IntNullableFilter<"CategoryResult"> | number | null
    max_age?: IntNullableFilter<"CategoryResult"> | number | null
    min_systolic?: IntFilter<"CategoryResult"> | number
    max_systolic?: IntFilter<"CategoryResult"> | number
    min_diastolic?: IntFilter<"CategoryResult"> | number
    max_diastolic?: IntFilter<"CategoryResult"> | number
    description?: StringFilter<"CategoryResult"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "gender_min_age_max_age_min_systolic_max_systolic_min_diastolic_max_diastolic">

  export type CategoryResultOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    color?: SortOrder
    is_age_required?: SortOrder
    min_age?: SortOrderInput | SortOrder
    max_age?: SortOrderInput | SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
    description?: SortOrder
    _count?: CategoryResultCountOrderByAggregateInput
    _avg?: CategoryResultAvgOrderByAggregateInput
    _max?: CategoryResultMaxOrderByAggregateInput
    _min?: CategoryResultMinOrderByAggregateInput
    _sum?: CategoryResultSumOrderByAggregateInput
  }

  export type CategoryResultScalarWhereWithAggregatesInput = {
    AND?: CategoryResultScalarWhereWithAggregatesInput | CategoryResultScalarWhereWithAggregatesInput[]
    OR?: CategoryResultScalarWhereWithAggregatesInput[]
    NOT?: CategoryResultScalarWhereWithAggregatesInput | CategoryResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CategoryResult"> | number
    user_id?: StringWithAggregatesFilter<"CategoryResult"> | string
    name?: StringWithAggregatesFilter<"CategoryResult"> | string
    gender?: StringWithAggregatesFilter<"CategoryResult"> | string
    color?: StringWithAggregatesFilter<"CategoryResult"> | string
    is_age_required?: BoolWithAggregatesFilter<"CategoryResult"> | boolean
    min_age?: IntNullableWithAggregatesFilter<"CategoryResult"> | number | null
    max_age?: IntNullableWithAggregatesFilter<"CategoryResult"> | number | null
    min_systolic?: IntWithAggregatesFilter<"CategoryResult"> | number
    max_systolic?: IntWithAggregatesFilter<"CategoryResult"> | number
    min_diastolic?: IntWithAggregatesFilter<"CategoryResult"> | number
    max_diastolic?: IntWithAggregatesFilter<"CategoryResult"> | number
    description?: StringWithAggregatesFilter<"CategoryResult"> | string
  }

  export type DefaultCategoryResultWhereInput = {
    AND?: DefaultCategoryResultWhereInput | DefaultCategoryResultWhereInput[]
    OR?: DefaultCategoryResultWhereInput[]
    NOT?: DefaultCategoryResultWhereInput | DefaultCategoryResultWhereInput[]
    id?: IntFilter<"DefaultCategoryResult"> | number
    user_id?: StringFilter<"DefaultCategoryResult"> | string
    name?: StringFilter<"DefaultCategoryResult"> | string
    gender?: StringFilter<"DefaultCategoryResult"> | string
    color?: StringFilter<"DefaultCategoryResult"> | string
    is_age_required?: BoolFilter<"DefaultCategoryResult"> | boolean
    min_age?: IntNullableFilter<"DefaultCategoryResult"> | number | null
    max_age?: IntNullableFilter<"DefaultCategoryResult"> | number | null
    min_systolic?: IntFilter<"DefaultCategoryResult"> | number
    max_systolic?: IntFilter<"DefaultCategoryResult"> | number
    min_diastolic?: IntFilter<"DefaultCategoryResult"> | number
    max_diastolic?: IntFilter<"DefaultCategoryResult"> | number
    description?: StringFilter<"DefaultCategoryResult"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type DefaultCategoryResultOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    color?: SortOrder
    is_age_required?: SortOrder
    min_age?: SortOrderInput | SortOrder
    max_age?: SortOrderInput | SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
    description?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: DefaultCategoryResultOrderByRelevanceInput
  }

  export type DefaultCategoryResultWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    gender_min_age_max_age_min_systolic_max_systolic_min_diastolic_max_diastolic?: DefaultCategoryResultGenderMin_ageMax_ageMin_systolicMax_systolicMin_diastolicMax_diastolicCompoundUniqueInput
    AND?: DefaultCategoryResultWhereInput | DefaultCategoryResultWhereInput[]
    OR?: DefaultCategoryResultWhereInput[]
    NOT?: DefaultCategoryResultWhereInput | DefaultCategoryResultWhereInput[]
    user_id?: StringFilter<"DefaultCategoryResult"> | string
    name?: StringFilter<"DefaultCategoryResult"> | string
    gender?: StringFilter<"DefaultCategoryResult"> | string
    color?: StringFilter<"DefaultCategoryResult"> | string
    is_age_required?: BoolFilter<"DefaultCategoryResult"> | boolean
    min_age?: IntNullableFilter<"DefaultCategoryResult"> | number | null
    max_age?: IntNullableFilter<"DefaultCategoryResult"> | number | null
    min_systolic?: IntFilter<"DefaultCategoryResult"> | number
    max_systolic?: IntFilter<"DefaultCategoryResult"> | number
    min_diastolic?: IntFilter<"DefaultCategoryResult"> | number
    max_diastolic?: IntFilter<"DefaultCategoryResult"> | number
    description?: StringFilter<"DefaultCategoryResult"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "gender_min_age_max_age_min_systolic_max_systolic_min_diastolic_max_diastolic">

  export type DefaultCategoryResultOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    color?: SortOrder
    is_age_required?: SortOrder
    min_age?: SortOrderInput | SortOrder
    max_age?: SortOrderInput | SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
    description?: SortOrder
    _count?: DefaultCategoryResultCountOrderByAggregateInput
    _avg?: DefaultCategoryResultAvgOrderByAggregateInput
    _max?: DefaultCategoryResultMaxOrderByAggregateInput
    _min?: DefaultCategoryResultMinOrderByAggregateInput
    _sum?: DefaultCategoryResultSumOrderByAggregateInput
  }

  export type DefaultCategoryResultScalarWhereWithAggregatesInput = {
    AND?: DefaultCategoryResultScalarWhereWithAggregatesInput | DefaultCategoryResultScalarWhereWithAggregatesInput[]
    OR?: DefaultCategoryResultScalarWhereWithAggregatesInput[]
    NOT?: DefaultCategoryResultScalarWhereWithAggregatesInput | DefaultCategoryResultScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DefaultCategoryResult"> | number
    user_id?: StringWithAggregatesFilter<"DefaultCategoryResult"> | string
    name?: StringWithAggregatesFilter<"DefaultCategoryResult"> | string
    gender?: StringWithAggregatesFilter<"DefaultCategoryResult"> | string
    color?: StringWithAggregatesFilter<"DefaultCategoryResult"> | string
    is_age_required?: BoolWithAggregatesFilter<"DefaultCategoryResult"> | boolean
    min_age?: IntNullableWithAggregatesFilter<"DefaultCategoryResult"> | number | null
    max_age?: IntNullableWithAggregatesFilter<"DefaultCategoryResult"> | number | null
    min_systolic?: IntWithAggregatesFilter<"DefaultCategoryResult"> | number
    max_systolic?: IntWithAggregatesFilter<"DefaultCategoryResult"> | number
    min_diastolic?: IntWithAggregatesFilter<"DefaultCategoryResult"> | number
    max_diastolic?: IntWithAggregatesFilter<"DefaultCategoryResult"> | number
    description?: StringWithAggregatesFilter<"DefaultCategoryResult"> | string
  }

  export type ProfilePictureWhereInput = {
    AND?: ProfilePictureWhereInput | ProfilePictureWhereInput[]
    OR?: ProfilePictureWhereInput[]
    NOT?: ProfilePictureWhereInput | ProfilePictureWhereInput[]
    id?: IntFilter<"ProfilePicture"> | number
    user_id?: StringFilter<"ProfilePicture"> | string
    path?: StringFilter<"ProfilePicture"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProfilePictureOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    path?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: ProfilePictureOrderByRelevanceInput
  }

  export type ProfilePictureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProfilePictureWhereInput | ProfilePictureWhereInput[]
    OR?: ProfilePictureWhereInput[]
    NOT?: ProfilePictureWhereInput | ProfilePictureWhereInput[]
    user_id?: StringFilter<"ProfilePicture"> | string
    path?: StringFilter<"ProfilePicture"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ProfilePictureOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    path?: SortOrder
    _count?: ProfilePictureCountOrderByAggregateInput
    _avg?: ProfilePictureAvgOrderByAggregateInput
    _max?: ProfilePictureMaxOrderByAggregateInput
    _min?: ProfilePictureMinOrderByAggregateInput
    _sum?: ProfilePictureSumOrderByAggregateInput
  }

  export type ProfilePictureScalarWhereWithAggregatesInput = {
    AND?: ProfilePictureScalarWhereWithAggregatesInput | ProfilePictureScalarWhereWithAggregatesInput[]
    OR?: ProfilePictureScalarWhereWithAggregatesInput[]
    NOT?: ProfilePictureScalarWhereWithAggregatesInput | ProfilePictureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProfilePicture"> | number
    user_id?: StringWithAggregatesFilter<"ProfilePicture"> | string
    path?: StringWithAggregatesFilter<"ProfilePicture"> | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    password: string
    name: string
    token?: string | null
    patient?: PatientCreateNestedManyWithoutUserInput
    category_result?: CategoryResultCreateNestedManyWithoutUserInput
    default_category_result?: DefaultCategoryResultCreateNestedManyWithoutUserInput
    patient_measurement?: PatientMeasurementCreateNestedManyWithoutUserInput
    profile_picture?: ProfilePictureCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    password: string
    name: string
    token?: string | null
    patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    category_result?: CategoryResultUncheckedCreateNestedManyWithoutUserInput
    default_category_result?: DefaultCategoryResultUncheckedCreateNestedManyWithoutUserInput
    patient_measurement?: PatientMeasurementUncheckedCreateNestedManyWithoutUserInput
    profile_picture?: ProfilePictureUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateManyWithoutUserNestedInput
    category_result?: CategoryResultUpdateManyWithoutUserNestedInput
    default_category_result?: DefaultCategoryResultUpdateManyWithoutUserNestedInput
    patient_measurement?: PatientMeasurementUpdateManyWithoutUserNestedInput
    profile_picture?: ProfilePictureUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    category_result?: CategoryResultUncheckedUpdateManyWithoutUserNestedInput
    default_category_result?: DefaultCategoryResultUncheckedUpdateManyWithoutUserNestedInput
    patient_measurement?: PatientMeasurementUncheckedUpdateManyWithoutUserNestedInput
    profile_picture?: ProfilePictureUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    password: string
    name: string
    token?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MeasurementCreateInput = {
    user_id: string
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    timestamp?: Date | string
  }

  export type MeasurementUncheckedCreateInput = {
    id?: number
    user_id: string
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    timestamp?: Date | string
  }

  export type MeasurementUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeasurementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeasurementCreateManyInput = {
    id?: number
    user_id: string
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    timestamp?: Date | string
  }

  export type MeasurementUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeasurementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCreateInput = {
    name: string
    gender: $Enums.Gender
    phone: string
    work: string
    last_education: string
    place_of_birth: string
    date_of_birth: Date | string
    user: UserCreateNestedOneWithoutPatientInput
    patient_measurement?: PatientMeasurementCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateInput = {
    id?: number
    user_id: string
    name: string
    gender: $Enums.Gender
    phone: string
    work: string
    last_education: string
    place_of_birth: string
    date_of_birth: Date | string
    patient_measurement?: PatientMeasurementUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    work?: StringFieldUpdateOperationsInput | string
    last_education?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
    patient_measurement?: PatientMeasurementUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    work?: StringFieldUpdateOperationsInput | string
    last_education?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    patient_measurement?: PatientMeasurementUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientCreateManyInput = {
    id?: number
    user_id: string
    name: string
    gender: $Enums.Gender
    phone: string
    work: string
    last_education: string
    place_of_birth: string
    date_of_birth: Date | string
  }

  export type PatientUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    work?: StringFieldUpdateOperationsInput | string
    last_education?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    work?: StringFieldUpdateOperationsInput | string
    last_education?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientMeasurementCreateInput = {
    weight: number
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    category_result?: string | null
    category_color?: string | null
    timestamp?: Date | string
    patient: PatientCreateNestedOneWithoutPatient_measurementInput
    user: UserCreateNestedOneWithoutPatient_measurementInput
  }

  export type PatientMeasurementUncheckedCreateInput = {
    id?: number
    patient_id: number
    user_id: string
    weight: number
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    category_result?: string | null
    category_color?: string | null
    timestamp?: Date | string
  }

  export type PatientMeasurementUpdateInput = {
    weight?: FloatFieldUpdateOperationsInput | number
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    category_result?: NullableStringFieldUpdateOperationsInput | string | null
    category_color?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPatient_measurementNestedInput
    user?: UserUpdateOneRequiredWithoutPatient_measurementNestedInput
  }

  export type PatientMeasurementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    category_result?: NullableStringFieldUpdateOperationsInput | string | null
    category_color?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientMeasurementCreateManyInput = {
    id?: number
    patient_id: number
    user_id: string
    weight: number
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    category_result?: string | null
    category_color?: string | null
    timestamp?: Date | string
  }

  export type PatientMeasurementUpdateManyMutationInput = {
    weight?: FloatFieldUpdateOperationsInput | number
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    category_result?: NullableStringFieldUpdateOperationsInput | string | null
    category_color?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientMeasurementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    category_result?: NullableStringFieldUpdateOperationsInput | string | null
    category_color?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryResultCreateInput = {
    name: string
    gender?: string
    color: string
    is_age_required: boolean
    min_age?: number | null
    max_age?: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
    user: UserCreateNestedOneWithoutCategory_resultInput
  }

  export type CategoryResultUncheckedCreateInput = {
    id?: number
    user_id: string
    name: string
    gender?: string
    color: string
    is_age_required: boolean
    min_age?: number | null
    max_age?: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
  }

  export type CategoryResultUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutCategory_resultNestedInput
  }

  export type CategoryResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryResultCreateManyInput = {
    id?: number
    user_id: string
    name: string
    gender?: string
    color: string
    is_age_required: boolean
    min_age?: number | null
    max_age?: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
  }

  export type CategoryResultUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type DefaultCategoryResultCreateInput = {
    name: string
    gender?: string
    color: string
    is_age_required: boolean
    min_age?: number | null
    max_age?: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
    user: UserCreateNestedOneWithoutDefault_category_resultInput
  }

  export type DefaultCategoryResultUncheckedCreateInput = {
    id?: number
    user_id: string
    name: string
    gender?: string
    color: string
    is_age_required: boolean
    min_age?: number | null
    max_age?: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
  }

  export type DefaultCategoryResultUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutDefault_category_resultNestedInput
  }

  export type DefaultCategoryResultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type DefaultCategoryResultCreateManyInput = {
    id?: number
    user_id: string
    name: string
    gender?: string
    color: string
    is_age_required: boolean
    min_age?: number | null
    max_age?: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
  }

  export type DefaultCategoryResultUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type DefaultCategoryResultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilePictureCreateInput = {
    path: string
    user: UserCreateNestedOneWithoutProfile_pictureInput
  }

  export type ProfilePictureUncheckedCreateInput = {
    id?: number
    user_id: string
    path: string
  }

  export type ProfilePictureUpdateInput = {
    path?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutProfile_pictureNestedInput
  }

  export type ProfilePictureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilePictureCreateManyInput = {
    id?: number
    user_id: string
    path: string
  }

  export type ProfilePictureUpdateManyMutationInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilePictureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PatientListRelationFilter = {
    every?: PatientWhereInput
    some?: PatientWhereInput
    none?: PatientWhereInput
  }

  export type CategoryResultListRelationFilter = {
    every?: CategoryResultWhereInput
    some?: CategoryResultWhereInput
    none?: CategoryResultWhereInput
  }

  export type DefaultCategoryResultListRelationFilter = {
    every?: DefaultCategoryResultWhereInput
    some?: DefaultCategoryResultWhereInput
    none?: DefaultCategoryResultWhereInput
  }

  export type PatientMeasurementListRelationFilter = {
    every?: PatientMeasurementWhereInput
    some?: PatientMeasurementWhereInput
    none?: PatientMeasurementWhereInput
  }

  export type ProfilePictureListRelationFilter = {
    every?: ProfilePictureWhereInput
    some?: ProfilePictureWhereInput
    none?: ProfilePictureWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PatientOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DefaultCategoryResultOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientMeasurementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfilePictureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    token?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    token?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    name?: SortOrder
    token?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MeasurementOrderByRelevanceInput = {
    fields: MeasurementOrderByRelevanceFieldEnum | MeasurementOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MeasurementCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
    timestamp?: SortOrder
  }

  export type MeasurementAvgOrderByAggregateInput = {
    id?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
  }

  export type MeasurementMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
    timestamp?: SortOrder
  }

  export type MeasurementMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
    timestamp?: SortOrder
  }

  export type MeasurementSumOrderByAggregateInput = {
    id?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PatientOrderByRelevanceInput = {
    fields: PatientOrderByRelevanceFieldEnum | PatientOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PatientCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    work?: SortOrder
    last_education?: SortOrder
    place_of_birth?: SortOrder
    date_of_birth?: SortOrder
  }

  export type PatientAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PatientMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    work?: SortOrder
    last_education?: SortOrder
    place_of_birth?: SortOrder
    date_of_birth?: SortOrder
  }

  export type PatientMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    phone?: SortOrder
    work?: SortOrder
    last_education?: SortOrder
    place_of_birth?: SortOrder
    date_of_birth?: SortOrder
  }

  export type PatientSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type PatientScalarRelationFilter = {
    is?: PatientWhereInput
    isNot?: PatientWhereInput
  }

  export type PatientMeasurementOrderByRelevanceInput = {
    fields: PatientMeasurementOrderByRelevanceFieldEnum | PatientMeasurementOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PatientMeasurementCountOrderByAggregateInput = {
    id?: SortOrder
    patient_id?: SortOrder
    user_id?: SortOrder
    weight?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
    category_result?: SortOrder
    category_color?: SortOrder
    timestamp?: SortOrder
  }

  export type PatientMeasurementAvgOrderByAggregateInput = {
    id?: SortOrder
    patient_id?: SortOrder
    weight?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
  }

  export type PatientMeasurementMaxOrderByAggregateInput = {
    id?: SortOrder
    patient_id?: SortOrder
    user_id?: SortOrder
    weight?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
    category_result?: SortOrder
    category_color?: SortOrder
    timestamp?: SortOrder
  }

  export type PatientMeasurementMinOrderByAggregateInput = {
    id?: SortOrder
    patient_id?: SortOrder
    user_id?: SortOrder
    weight?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
    category_result?: SortOrder
    category_color?: SortOrder
    timestamp?: SortOrder
  }

  export type PatientMeasurementSumOrderByAggregateInput = {
    id?: SortOrder
    patient_id?: SortOrder
    weight?: SortOrder
    systolic?: SortOrder
    diastolic?: SortOrder
    mean?: SortOrder
    heart_rate?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CategoryResultOrderByRelevanceInput = {
    fields: CategoryResultOrderByRelevanceFieldEnum | CategoryResultOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CategoryResultGenderMin_ageMax_ageMin_systolicMax_systolicMin_diastolicMax_diastolicCompoundUniqueInput = {
    gender: string
    min_age: number
    max_age: number
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
  }

  export type CategoryResultCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    color?: SortOrder
    is_age_required?: SortOrder
    min_age?: SortOrder
    max_age?: SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
    description?: SortOrder
  }

  export type CategoryResultAvgOrderByAggregateInput = {
    id?: SortOrder
    min_age?: SortOrder
    max_age?: SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
  }

  export type CategoryResultMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    color?: SortOrder
    is_age_required?: SortOrder
    min_age?: SortOrder
    max_age?: SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
    description?: SortOrder
  }

  export type CategoryResultMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    color?: SortOrder
    is_age_required?: SortOrder
    min_age?: SortOrder
    max_age?: SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
    description?: SortOrder
  }

  export type CategoryResultSumOrderByAggregateInput = {
    id?: SortOrder
    min_age?: SortOrder
    max_age?: SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DefaultCategoryResultOrderByRelevanceInput = {
    fields: DefaultCategoryResultOrderByRelevanceFieldEnum | DefaultCategoryResultOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type DefaultCategoryResultGenderMin_ageMax_ageMin_systolicMax_systolicMin_diastolicMax_diastolicCompoundUniqueInput = {
    gender: string
    min_age: number
    max_age: number
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
  }

  export type DefaultCategoryResultCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    color?: SortOrder
    is_age_required?: SortOrder
    min_age?: SortOrder
    max_age?: SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
    description?: SortOrder
  }

  export type DefaultCategoryResultAvgOrderByAggregateInput = {
    id?: SortOrder
    min_age?: SortOrder
    max_age?: SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
  }

  export type DefaultCategoryResultMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    color?: SortOrder
    is_age_required?: SortOrder
    min_age?: SortOrder
    max_age?: SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
    description?: SortOrder
  }

  export type DefaultCategoryResultMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    name?: SortOrder
    gender?: SortOrder
    color?: SortOrder
    is_age_required?: SortOrder
    min_age?: SortOrder
    max_age?: SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
    description?: SortOrder
  }

  export type DefaultCategoryResultSumOrderByAggregateInput = {
    id?: SortOrder
    min_age?: SortOrder
    max_age?: SortOrder
    min_systolic?: SortOrder
    max_systolic?: SortOrder
    min_diastolic?: SortOrder
    max_diastolic?: SortOrder
  }

  export type ProfilePictureOrderByRelevanceInput = {
    fields: ProfilePictureOrderByRelevanceFieldEnum | ProfilePictureOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type ProfilePictureCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    path?: SortOrder
  }

  export type ProfilePictureAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProfilePictureMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    path?: SortOrder
  }

  export type ProfilePictureMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    path?: SortOrder
  }

  export type ProfilePictureSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PatientCreateNestedManyWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
    createMany?: PatientCreateManyUserInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type CategoryResultCreateNestedManyWithoutUserInput = {
    create?: XOR<CategoryResultCreateWithoutUserInput, CategoryResultUncheckedCreateWithoutUserInput> | CategoryResultCreateWithoutUserInput[] | CategoryResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoryResultCreateOrConnectWithoutUserInput | CategoryResultCreateOrConnectWithoutUserInput[]
    createMany?: CategoryResultCreateManyUserInputEnvelope
    connect?: CategoryResultWhereUniqueInput | CategoryResultWhereUniqueInput[]
  }

  export type DefaultCategoryResultCreateNestedManyWithoutUserInput = {
    create?: XOR<DefaultCategoryResultCreateWithoutUserInput, DefaultCategoryResultUncheckedCreateWithoutUserInput> | DefaultCategoryResultCreateWithoutUserInput[] | DefaultCategoryResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DefaultCategoryResultCreateOrConnectWithoutUserInput | DefaultCategoryResultCreateOrConnectWithoutUserInput[]
    createMany?: DefaultCategoryResultCreateManyUserInputEnvelope
    connect?: DefaultCategoryResultWhereUniqueInput | DefaultCategoryResultWhereUniqueInput[]
  }

  export type PatientMeasurementCreateNestedManyWithoutUserInput = {
    create?: XOR<PatientMeasurementCreateWithoutUserInput, PatientMeasurementUncheckedCreateWithoutUserInput> | PatientMeasurementCreateWithoutUserInput[] | PatientMeasurementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientMeasurementCreateOrConnectWithoutUserInput | PatientMeasurementCreateOrConnectWithoutUserInput[]
    createMany?: PatientMeasurementCreateManyUserInputEnvelope
    connect?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
  }

  export type ProfilePictureCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput> | ProfilePictureCreateWithoutUserInput[] | ProfilePictureUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutUserInput | ProfilePictureCreateOrConnectWithoutUserInput[]
    createMany?: ProfilePictureCreateManyUserInputEnvelope
    connect?: ProfilePictureWhereUniqueInput | ProfilePictureWhereUniqueInput[]
  }

  export type PatientUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
    createMany?: PatientCreateManyUserInputEnvelope
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
  }

  export type CategoryResultUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CategoryResultCreateWithoutUserInput, CategoryResultUncheckedCreateWithoutUserInput> | CategoryResultCreateWithoutUserInput[] | CategoryResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoryResultCreateOrConnectWithoutUserInput | CategoryResultCreateOrConnectWithoutUserInput[]
    createMany?: CategoryResultCreateManyUserInputEnvelope
    connect?: CategoryResultWhereUniqueInput | CategoryResultWhereUniqueInput[]
  }

  export type DefaultCategoryResultUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<DefaultCategoryResultCreateWithoutUserInput, DefaultCategoryResultUncheckedCreateWithoutUserInput> | DefaultCategoryResultCreateWithoutUserInput[] | DefaultCategoryResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DefaultCategoryResultCreateOrConnectWithoutUserInput | DefaultCategoryResultCreateOrConnectWithoutUserInput[]
    createMany?: DefaultCategoryResultCreateManyUserInputEnvelope
    connect?: DefaultCategoryResultWhereUniqueInput | DefaultCategoryResultWhereUniqueInput[]
  }

  export type PatientMeasurementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PatientMeasurementCreateWithoutUserInput, PatientMeasurementUncheckedCreateWithoutUserInput> | PatientMeasurementCreateWithoutUserInput[] | PatientMeasurementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientMeasurementCreateOrConnectWithoutUserInput | PatientMeasurementCreateOrConnectWithoutUserInput[]
    createMany?: PatientMeasurementCreateManyUserInputEnvelope
    connect?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
  }

  export type ProfilePictureUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput> | ProfilePictureCreateWithoutUserInput[] | ProfilePictureUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutUserInput | ProfilePictureCreateOrConnectWithoutUserInput[]
    createMany?: ProfilePictureCreateManyUserInputEnvelope
    connect?: ProfilePictureWhereUniqueInput | ProfilePictureWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PatientUpdateManyWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutUserInput | PatientUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PatientCreateManyUserInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutUserInput | PatientUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutUserInput | PatientUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type CategoryResultUpdateManyWithoutUserNestedInput = {
    create?: XOR<CategoryResultCreateWithoutUserInput, CategoryResultUncheckedCreateWithoutUserInput> | CategoryResultCreateWithoutUserInput[] | CategoryResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoryResultCreateOrConnectWithoutUserInput | CategoryResultCreateOrConnectWithoutUserInput[]
    upsert?: CategoryResultUpsertWithWhereUniqueWithoutUserInput | CategoryResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CategoryResultCreateManyUserInputEnvelope
    set?: CategoryResultWhereUniqueInput | CategoryResultWhereUniqueInput[]
    disconnect?: CategoryResultWhereUniqueInput | CategoryResultWhereUniqueInput[]
    delete?: CategoryResultWhereUniqueInput | CategoryResultWhereUniqueInput[]
    connect?: CategoryResultWhereUniqueInput | CategoryResultWhereUniqueInput[]
    update?: CategoryResultUpdateWithWhereUniqueWithoutUserInput | CategoryResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CategoryResultUpdateManyWithWhereWithoutUserInput | CategoryResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CategoryResultScalarWhereInput | CategoryResultScalarWhereInput[]
  }

  export type DefaultCategoryResultUpdateManyWithoutUserNestedInput = {
    create?: XOR<DefaultCategoryResultCreateWithoutUserInput, DefaultCategoryResultUncheckedCreateWithoutUserInput> | DefaultCategoryResultCreateWithoutUserInput[] | DefaultCategoryResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DefaultCategoryResultCreateOrConnectWithoutUserInput | DefaultCategoryResultCreateOrConnectWithoutUserInput[]
    upsert?: DefaultCategoryResultUpsertWithWhereUniqueWithoutUserInput | DefaultCategoryResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DefaultCategoryResultCreateManyUserInputEnvelope
    set?: DefaultCategoryResultWhereUniqueInput | DefaultCategoryResultWhereUniqueInput[]
    disconnect?: DefaultCategoryResultWhereUniqueInput | DefaultCategoryResultWhereUniqueInput[]
    delete?: DefaultCategoryResultWhereUniqueInput | DefaultCategoryResultWhereUniqueInput[]
    connect?: DefaultCategoryResultWhereUniqueInput | DefaultCategoryResultWhereUniqueInput[]
    update?: DefaultCategoryResultUpdateWithWhereUniqueWithoutUserInput | DefaultCategoryResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DefaultCategoryResultUpdateManyWithWhereWithoutUserInput | DefaultCategoryResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DefaultCategoryResultScalarWhereInput | DefaultCategoryResultScalarWhereInput[]
  }

  export type PatientMeasurementUpdateManyWithoutUserNestedInput = {
    create?: XOR<PatientMeasurementCreateWithoutUserInput, PatientMeasurementUncheckedCreateWithoutUserInput> | PatientMeasurementCreateWithoutUserInput[] | PatientMeasurementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientMeasurementCreateOrConnectWithoutUserInput | PatientMeasurementCreateOrConnectWithoutUserInput[]
    upsert?: PatientMeasurementUpsertWithWhereUniqueWithoutUserInput | PatientMeasurementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PatientMeasurementCreateManyUserInputEnvelope
    set?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    disconnect?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    delete?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    connect?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    update?: PatientMeasurementUpdateWithWhereUniqueWithoutUserInput | PatientMeasurementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PatientMeasurementUpdateManyWithWhereWithoutUserInput | PatientMeasurementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PatientMeasurementScalarWhereInput | PatientMeasurementScalarWhereInput[]
  }

  export type ProfilePictureUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput> | ProfilePictureCreateWithoutUserInput[] | ProfilePictureUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutUserInput | ProfilePictureCreateOrConnectWithoutUserInput[]
    upsert?: ProfilePictureUpsertWithWhereUniqueWithoutUserInput | ProfilePictureUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfilePictureCreateManyUserInputEnvelope
    set?: ProfilePictureWhereUniqueInput | ProfilePictureWhereUniqueInput[]
    disconnect?: ProfilePictureWhereUniqueInput | ProfilePictureWhereUniqueInput[]
    delete?: ProfilePictureWhereUniqueInput | ProfilePictureWhereUniqueInput[]
    connect?: ProfilePictureWhereUniqueInput | ProfilePictureWhereUniqueInput[]
    update?: ProfilePictureUpdateWithWhereUniqueWithoutUserInput | ProfilePictureUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfilePictureUpdateManyWithWhereWithoutUserInput | ProfilePictureUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfilePictureScalarWhereInput | ProfilePictureScalarWhereInput[]
  }

  export type PatientUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput> | PatientCreateWithoutUserInput[] | PatientUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientCreateOrConnectWithoutUserInput | PatientCreateOrConnectWithoutUserInput[]
    upsert?: PatientUpsertWithWhereUniqueWithoutUserInput | PatientUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PatientCreateManyUserInputEnvelope
    set?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    disconnect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    delete?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    connect?: PatientWhereUniqueInput | PatientWhereUniqueInput[]
    update?: PatientUpdateWithWhereUniqueWithoutUserInput | PatientUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PatientUpdateManyWithWhereWithoutUserInput | PatientUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PatientScalarWhereInput | PatientScalarWhereInput[]
  }

  export type CategoryResultUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CategoryResultCreateWithoutUserInput, CategoryResultUncheckedCreateWithoutUserInput> | CategoryResultCreateWithoutUserInput[] | CategoryResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoryResultCreateOrConnectWithoutUserInput | CategoryResultCreateOrConnectWithoutUserInput[]
    upsert?: CategoryResultUpsertWithWhereUniqueWithoutUserInput | CategoryResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CategoryResultCreateManyUserInputEnvelope
    set?: CategoryResultWhereUniqueInput | CategoryResultWhereUniqueInput[]
    disconnect?: CategoryResultWhereUniqueInput | CategoryResultWhereUniqueInput[]
    delete?: CategoryResultWhereUniqueInput | CategoryResultWhereUniqueInput[]
    connect?: CategoryResultWhereUniqueInput | CategoryResultWhereUniqueInput[]
    update?: CategoryResultUpdateWithWhereUniqueWithoutUserInput | CategoryResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CategoryResultUpdateManyWithWhereWithoutUserInput | CategoryResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CategoryResultScalarWhereInput | CategoryResultScalarWhereInput[]
  }

  export type DefaultCategoryResultUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<DefaultCategoryResultCreateWithoutUserInput, DefaultCategoryResultUncheckedCreateWithoutUserInput> | DefaultCategoryResultCreateWithoutUserInput[] | DefaultCategoryResultUncheckedCreateWithoutUserInput[]
    connectOrCreate?: DefaultCategoryResultCreateOrConnectWithoutUserInput | DefaultCategoryResultCreateOrConnectWithoutUserInput[]
    upsert?: DefaultCategoryResultUpsertWithWhereUniqueWithoutUserInput | DefaultCategoryResultUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: DefaultCategoryResultCreateManyUserInputEnvelope
    set?: DefaultCategoryResultWhereUniqueInput | DefaultCategoryResultWhereUniqueInput[]
    disconnect?: DefaultCategoryResultWhereUniqueInput | DefaultCategoryResultWhereUniqueInput[]
    delete?: DefaultCategoryResultWhereUniqueInput | DefaultCategoryResultWhereUniqueInput[]
    connect?: DefaultCategoryResultWhereUniqueInput | DefaultCategoryResultWhereUniqueInput[]
    update?: DefaultCategoryResultUpdateWithWhereUniqueWithoutUserInput | DefaultCategoryResultUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: DefaultCategoryResultUpdateManyWithWhereWithoutUserInput | DefaultCategoryResultUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: DefaultCategoryResultScalarWhereInput | DefaultCategoryResultScalarWhereInput[]
  }

  export type PatientMeasurementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PatientMeasurementCreateWithoutUserInput, PatientMeasurementUncheckedCreateWithoutUserInput> | PatientMeasurementCreateWithoutUserInput[] | PatientMeasurementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PatientMeasurementCreateOrConnectWithoutUserInput | PatientMeasurementCreateOrConnectWithoutUserInput[]
    upsert?: PatientMeasurementUpsertWithWhereUniqueWithoutUserInput | PatientMeasurementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PatientMeasurementCreateManyUserInputEnvelope
    set?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    disconnect?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    delete?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    connect?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    update?: PatientMeasurementUpdateWithWhereUniqueWithoutUserInput | PatientMeasurementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PatientMeasurementUpdateManyWithWhereWithoutUserInput | PatientMeasurementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PatientMeasurementScalarWhereInput | PatientMeasurementScalarWhereInput[]
  }

  export type ProfilePictureUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput> | ProfilePictureCreateWithoutUserInput[] | ProfilePictureUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProfilePictureCreateOrConnectWithoutUserInput | ProfilePictureCreateOrConnectWithoutUserInput[]
    upsert?: ProfilePictureUpsertWithWhereUniqueWithoutUserInput | ProfilePictureUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProfilePictureCreateManyUserInputEnvelope
    set?: ProfilePictureWhereUniqueInput | ProfilePictureWhereUniqueInput[]
    disconnect?: ProfilePictureWhereUniqueInput | ProfilePictureWhereUniqueInput[]
    delete?: ProfilePictureWhereUniqueInput | ProfilePictureWhereUniqueInput[]
    connect?: ProfilePictureWhereUniqueInput | ProfilePictureWhereUniqueInput[]
    update?: ProfilePictureUpdateWithWhereUniqueWithoutUserInput | ProfilePictureUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProfilePictureUpdateManyWithWhereWithoutUserInput | ProfilePictureUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProfilePictureScalarWhereInput | ProfilePictureScalarWhereInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutPatientInput = {
    create?: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientInput
    connect?: UserWhereUniqueInput
  }

  export type PatientMeasurementCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientMeasurementCreateWithoutPatientInput, PatientMeasurementUncheckedCreateWithoutPatientInput> | PatientMeasurementCreateWithoutPatientInput[] | PatientMeasurementUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientMeasurementCreateOrConnectWithoutPatientInput | PatientMeasurementCreateOrConnectWithoutPatientInput[]
    createMany?: PatientMeasurementCreateManyPatientInputEnvelope
    connect?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
  }

  export type PatientMeasurementUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientMeasurementCreateWithoutPatientInput, PatientMeasurementUncheckedCreateWithoutPatientInput> | PatientMeasurementCreateWithoutPatientInput[] | PatientMeasurementUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientMeasurementCreateOrConnectWithoutPatientInput | PatientMeasurementCreateOrConnectWithoutPatientInput[]
    createMany?: PatientMeasurementCreateManyPatientInputEnvelope
    connect?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type UserUpdateOneRequiredWithoutPatientNestedInput = {
    create?: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientInput
    upsert?: UserUpsertWithoutPatientInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientInput, UserUpdateWithoutPatientInput>, UserUncheckedUpdateWithoutPatientInput>
  }

  export type PatientMeasurementUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientMeasurementCreateWithoutPatientInput, PatientMeasurementUncheckedCreateWithoutPatientInput> | PatientMeasurementCreateWithoutPatientInput[] | PatientMeasurementUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientMeasurementCreateOrConnectWithoutPatientInput | PatientMeasurementCreateOrConnectWithoutPatientInput[]
    upsert?: PatientMeasurementUpsertWithWhereUniqueWithoutPatientInput | PatientMeasurementUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientMeasurementCreateManyPatientInputEnvelope
    set?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    disconnect?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    delete?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    connect?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    update?: PatientMeasurementUpdateWithWhereUniqueWithoutPatientInput | PatientMeasurementUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientMeasurementUpdateManyWithWhereWithoutPatientInput | PatientMeasurementUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientMeasurementScalarWhereInput | PatientMeasurementScalarWhereInput[]
  }

  export type PatientMeasurementUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientMeasurementCreateWithoutPatientInput, PatientMeasurementUncheckedCreateWithoutPatientInput> | PatientMeasurementCreateWithoutPatientInput[] | PatientMeasurementUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientMeasurementCreateOrConnectWithoutPatientInput | PatientMeasurementCreateOrConnectWithoutPatientInput[]
    upsert?: PatientMeasurementUpsertWithWhereUniqueWithoutPatientInput | PatientMeasurementUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientMeasurementCreateManyPatientInputEnvelope
    set?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    disconnect?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    delete?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    connect?: PatientMeasurementWhereUniqueInput | PatientMeasurementWhereUniqueInput[]
    update?: PatientMeasurementUpdateWithWhereUniqueWithoutPatientInput | PatientMeasurementUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientMeasurementUpdateManyWithWhereWithoutPatientInput | PatientMeasurementUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientMeasurementScalarWhereInput | PatientMeasurementScalarWhereInput[]
  }

  export type PatientCreateNestedOneWithoutPatient_measurementInput = {
    create?: XOR<PatientCreateWithoutPatient_measurementInput, PatientUncheckedCreateWithoutPatient_measurementInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPatient_measurementInput
    connect?: PatientWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPatient_measurementInput = {
    create?: XOR<UserCreateWithoutPatient_measurementInput, UserUncheckedCreateWithoutPatient_measurementInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatient_measurementInput
    connect?: UserWhereUniqueInput
  }

  export type PatientUpdateOneRequiredWithoutPatient_measurementNestedInput = {
    create?: XOR<PatientCreateWithoutPatient_measurementInput, PatientUncheckedCreateWithoutPatient_measurementInput>
    connectOrCreate?: PatientCreateOrConnectWithoutPatient_measurementInput
    upsert?: PatientUpsertWithoutPatient_measurementInput
    connect?: PatientWhereUniqueInput
    update?: XOR<XOR<PatientUpdateToOneWithWhereWithoutPatient_measurementInput, PatientUpdateWithoutPatient_measurementInput>, PatientUncheckedUpdateWithoutPatient_measurementInput>
  }

  export type UserUpdateOneRequiredWithoutPatient_measurementNestedInput = {
    create?: XOR<UserCreateWithoutPatient_measurementInput, UserUncheckedCreateWithoutPatient_measurementInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatient_measurementInput
    upsert?: UserUpsertWithoutPatient_measurementInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatient_measurementInput, UserUpdateWithoutPatient_measurementInput>, UserUncheckedUpdateWithoutPatient_measurementInput>
  }

  export type UserCreateNestedOneWithoutCategory_resultInput = {
    create?: XOR<UserCreateWithoutCategory_resultInput, UserUncheckedCreateWithoutCategory_resultInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategory_resultInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutCategory_resultNestedInput = {
    create?: XOR<UserCreateWithoutCategory_resultInput, UserUncheckedCreateWithoutCategory_resultInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategory_resultInput
    upsert?: UserUpsertWithoutCategory_resultInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCategory_resultInput, UserUpdateWithoutCategory_resultInput>, UserUncheckedUpdateWithoutCategory_resultInput>
  }

  export type UserCreateNestedOneWithoutDefault_category_resultInput = {
    create?: XOR<UserCreateWithoutDefault_category_resultInput, UserUncheckedCreateWithoutDefault_category_resultInput>
    connectOrCreate?: UserCreateOrConnectWithoutDefault_category_resultInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutDefault_category_resultNestedInput = {
    create?: XOR<UserCreateWithoutDefault_category_resultInput, UserUncheckedCreateWithoutDefault_category_resultInput>
    connectOrCreate?: UserCreateOrConnectWithoutDefault_category_resultInput
    upsert?: UserUpsertWithoutDefault_category_resultInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDefault_category_resultInput, UserUpdateWithoutDefault_category_resultInput>, UserUncheckedUpdateWithoutDefault_category_resultInput>
  }

  export type UserCreateNestedOneWithoutProfile_pictureInput = {
    create?: XOR<UserCreateWithoutProfile_pictureInput, UserUncheckedCreateWithoutProfile_pictureInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfile_pictureInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProfile_pictureNestedInput = {
    create?: XOR<UserCreateWithoutProfile_pictureInput, UserUncheckedCreateWithoutProfile_pictureInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfile_pictureInput
    upsert?: UserUpsertWithoutProfile_pictureInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfile_pictureInput, UserUpdateWithoutProfile_pictureInput>, UserUncheckedUpdateWithoutProfile_pictureInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type PatientCreateWithoutUserInput = {
    name: string
    gender: $Enums.Gender
    phone: string
    work: string
    last_education: string
    place_of_birth: string
    date_of_birth: Date | string
    patient_measurement?: PatientMeasurementCreateNestedManyWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    gender: $Enums.Gender
    phone: string
    work: string
    last_education: string
    place_of_birth: string
    date_of_birth: Date | string
    patient_measurement?: PatientMeasurementUncheckedCreateNestedManyWithoutPatientInput
  }

  export type PatientCreateOrConnectWithoutUserInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
  }

  export type PatientCreateManyUserInputEnvelope = {
    data: PatientCreateManyUserInput | PatientCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CategoryResultCreateWithoutUserInput = {
    name: string
    gender?: string
    color: string
    is_age_required: boolean
    min_age?: number | null
    max_age?: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
  }

  export type CategoryResultUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    gender?: string
    color: string
    is_age_required: boolean
    min_age?: number | null
    max_age?: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
  }

  export type CategoryResultCreateOrConnectWithoutUserInput = {
    where: CategoryResultWhereUniqueInput
    create: XOR<CategoryResultCreateWithoutUserInput, CategoryResultUncheckedCreateWithoutUserInput>
  }

  export type CategoryResultCreateManyUserInputEnvelope = {
    data: CategoryResultCreateManyUserInput | CategoryResultCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type DefaultCategoryResultCreateWithoutUserInput = {
    name: string
    gender?: string
    color: string
    is_age_required: boolean
    min_age?: number | null
    max_age?: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
  }

  export type DefaultCategoryResultUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    gender?: string
    color: string
    is_age_required: boolean
    min_age?: number | null
    max_age?: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
  }

  export type DefaultCategoryResultCreateOrConnectWithoutUserInput = {
    where: DefaultCategoryResultWhereUniqueInput
    create: XOR<DefaultCategoryResultCreateWithoutUserInput, DefaultCategoryResultUncheckedCreateWithoutUserInput>
  }

  export type DefaultCategoryResultCreateManyUserInputEnvelope = {
    data: DefaultCategoryResultCreateManyUserInput | DefaultCategoryResultCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PatientMeasurementCreateWithoutUserInput = {
    weight: number
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    category_result?: string | null
    category_color?: string | null
    timestamp?: Date | string
    patient: PatientCreateNestedOneWithoutPatient_measurementInput
  }

  export type PatientMeasurementUncheckedCreateWithoutUserInput = {
    id?: number
    patient_id: number
    weight: number
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    category_result?: string | null
    category_color?: string | null
    timestamp?: Date | string
  }

  export type PatientMeasurementCreateOrConnectWithoutUserInput = {
    where: PatientMeasurementWhereUniqueInput
    create: XOR<PatientMeasurementCreateWithoutUserInput, PatientMeasurementUncheckedCreateWithoutUserInput>
  }

  export type PatientMeasurementCreateManyUserInputEnvelope = {
    data: PatientMeasurementCreateManyUserInput | PatientMeasurementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProfilePictureCreateWithoutUserInput = {
    path: string
  }

  export type ProfilePictureUncheckedCreateWithoutUserInput = {
    id?: number
    path: string
  }

  export type ProfilePictureCreateOrConnectWithoutUserInput = {
    where: ProfilePictureWhereUniqueInput
    create: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput>
  }

  export type ProfilePictureCreateManyUserInputEnvelope = {
    data: ProfilePictureCreateManyUserInput | ProfilePictureCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PatientUpsertWithWhereUniqueWithoutUserInput = {
    where: PatientWhereUniqueInput
    update: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
    create: XOR<PatientCreateWithoutUserInput, PatientUncheckedCreateWithoutUserInput>
  }

  export type PatientUpdateWithWhereUniqueWithoutUserInput = {
    where: PatientWhereUniqueInput
    data: XOR<PatientUpdateWithoutUserInput, PatientUncheckedUpdateWithoutUserInput>
  }

  export type PatientUpdateManyWithWhereWithoutUserInput = {
    where: PatientScalarWhereInput
    data: XOR<PatientUpdateManyMutationInput, PatientUncheckedUpdateManyWithoutUserInput>
  }

  export type PatientScalarWhereInput = {
    AND?: PatientScalarWhereInput | PatientScalarWhereInput[]
    OR?: PatientScalarWhereInput[]
    NOT?: PatientScalarWhereInput | PatientScalarWhereInput[]
    id?: IntFilter<"Patient"> | number
    user_id?: StringFilter<"Patient"> | string
    name?: StringFilter<"Patient"> | string
    gender?: EnumGenderFilter<"Patient"> | $Enums.Gender
    phone?: StringFilter<"Patient"> | string
    work?: StringFilter<"Patient"> | string
    last_education?: StringFilter<"Patient"> | string
    place_of_birth?: StringFilter<"Patient"> | string
    date_of_birth?: DateTimeFilter<"Patient"> | Date | string
  }

  export type CategoryResultUpsertWithWhereUniqueWithoutUserInput = {
    where: CategoryResultWhereUniqueInput
    update: XOR<CategoryResultUpdateWithoutUserInput, CategoryResultUncheckedUpdateWithoutUserInput>
    create: XOR<CategoryResultCreateWithoutUserInput, CategoryResultUncheckedCreateWithoutUserInput>
  }

  export type CategoryResultUpdateWithWhereUniqueWithoutUserInput = {
    where: CategoryResultWhereUniqueInput
    data: XOR<CategoryResultUpdateWithoutUserInput, CategoryResultUncheckedUpdateWithoutUserInput>
  }

  export type CategoryResultUpdateManyWithWhereWithoutUserInput = {
    where: CategoryResultScalarWhereInput
    data: XOR<CategoryResultUpdateManyMutationInput, CategoryResultUncheckedUpdateManyWithoutUserInput>
  }

  export type CategoryResultScalarWhereInput = {
    AND?: CategoryResultScalarWhereInput | CategoryResultScalarWhereInput[]
    OR?: CategoryResultScalarWhereInput[]
    NOT?: CategoryResultScalarWhereInput | CategoryResultScalarWhereInput[]
    id?: IntFilter<"CategoryResult"> | number
    user_id?: StringFilter<"CategoryResult"> | string
    name?: StringFilter<"CategoryResult"> | string
    gender?: StringFilter<"CategoryResult"> | string
    color?: StringFilter<"CategoryResult"> | string
    is_age_required?: BoolFilter<"CategoryResult"> | boolean
    min_age?: IntNullableFilter<"CategoryResult"> | number | null
    max_age?: IntNullableFilter<"CategoryResult"> | number | null
    min_systolic?: IntFilter<"CategoryResult"> | number
    max_systolic?: IntFilter<"CategoryResult"> | number
    min_diastolic?: IntFilter<"CategoryResult"> | number
    max_diastolic?: IntFilter<"CategoryResult"> | number
    description?: StringFilter<"CategoryResult"> | string
  }

  export type DefaultCategoryResultUpsertWithWhereUniqueWithoutUserInput = {
    where: DefaultCategoryResultWhereUniqueInput
    update: XOR<DefaultCategoryResultUpdateWithoutUserInput, DefaultCategoryResultUncheckedUpdateWithoutUserInput>
    create: XOR<DefaultCategoryResultCreateWithoutUserInput, DefaultCategoryResultUncheckedCreateWithoutUserInput>
  }

  export type DefaultCategoryResultUpdateWithWhereUniqueWithoutUserInput = {
    where: DefaultCategoryResultWhereUniqueInput
    data: XOR<DefaultCategoryResultUpdateWithoutUserInput, DefaultCategoryResultUncheckedUpdateWithoutUserInput>
  }

  export type DefaultCategoryResultUpdateManyWithWhereWithoutUserInput = {
    where: DefaultCategoryResultScalarWhereInput
    data: XOR<DefaultCategoryResultUpdateManyMutationInput, DefaultCategoryResultUncheckedUpdateManyWithoutUserInput>
  }

  export type DefaultCategoryResultScalarWhereInput = {
    AND?: DefaultCategoryResultScalarWhereInput | DefaultCategoryResultScalarWhereInput[]
    OR?: DefaultCategoryResultScalarWhereInput[]
    NOT?: DefaultCategoryResultScalarWhereInput | DefaultCategoryResultScalarWhereInput[]
    id?: IntFilter<"DefaultCategoryResult"> | number
    user_id?: StringFilter<"DefaultCategoryResult"> | string
    name?: StringFilter<"DefaultCategoryResult"> | string
    gender?: StringFilter<"DefaultCategoryResult"> | string
    color?: StringFilter<"DefaultCategoryResult"> | string
    is_age_required?: BoolFilter<"DefaultCategoryResult"> | boolean
    min_age?: IntNullableFilter<"DefaultCategoryResult"> | number | null
    max_age?: IntNullableFilter<"DefaultCategoryResult"> | number | null
    min_systolic?: IntFilter<"DefaultCategoryResult"> | number
    max_systolic?: IntFilter<"DefaultCategoryResult"> | number
    min_diastolic?: IntFilter<"DefaultCategoryResult"> | number
    max_diastolic?: IntFilter<"DefaultCategoryResult"> | number
    description?: StringFilter<"DefaultCategoryResult"> | string
  }

  export type PatientMeasurementUpsertWithWhereUniqueWithoutUserInput = {
    where: PatientMeasurementWhereUniqueInput
    update: XOR<PatientMeasurementUpdateWithoutUserInput, PatientMeasurementUncheckedUpdateWithoutUserInput>
    create: XOR<PatientMeasurementCreateWithoutUserInput, PatientMeasurementUncheckedCreateWithoutUserInput>
  }

  export type PatientMeasurementUpdateWithWhereUniqueWithoutUserInput = {
    where: PatientMeasurementWhereUniqueInput
    data: XOR<PatientMeasurementUpdateWithoutUserInput, PatientMeasurementUncheckedUpdateWithoutUserInput>
  }

  export type PatientMeasurementUpdateManyWithWhereWithoutUserInput = {
    where: PatientMeasurementScalarWhereInput
    data: XOR<PatientMeasurementUpdateManyMutationInput, PatientMeasurementUncheckedUpdateManyWithoutUserInput>
  }

  export type PatientMeasurementScalarWhereInput = {
    AND?: PatientMeasurementScalarWhereInput | PatientMeasurementScalarWhereInput[]
    OR?: PatientMeasurementScalarWhereInput[]
    NOT?: PatientMeasurementScalarWhereInput | PatientMeasurementScalarWhereInput[]
    id?: IntFilter<"PatientMeasurement"> | number
    patient_id?: IntFilter<"PatientMeasurement"> | number
    user_id?: StringFilter<"PatientMeasurement"> | string
    weight?: FloatFilter<"PatientMeasurement"> | number
    systolic?: FloatFilter<"PatientMeasurement"> | number
    diastolic?: FloatFilter<"PatientMeasurement"> | number
    mean?: FloatFilter<"PatientMeasurement"> | number
    heart_rate?: FloatFilter<"PatientMeasurement"> | number
    category_result?: StringNullableFilter<"PatientMeasurement"> | string | null
    category_color?: StringNullableFilter<"PatientMeasurement"> | string | null
    timestamp?: DateTimeFilter<"PatientMeasurement"> | Date | string
  }

  export type ProfilePictureUpsertWithWhereUniqueWithoutUserInput = {
    where: ProfilePictureWhereUniqueInput
    update: XOR<ProfilePictureUpdateWithoutUserInput, ProfilePictureUncheckedUpdateWithoutUserInput>
    create: XOR<ProfilePictureCreateWithoutUserInput, ProfilePictureUncheckedCreateWithoutUserInput>
  }

  export type ProfilePictureUpdateWithWhereUniqueWithoutUserInput = {
    where: ProfilePictureWhereUniqueInput
    data: XOR<ProfilePictureUpdateWithoutUserInput, ProfilePictureUncheckedUpdateWithoutUserInput>
  }

  export type ProfilePictureUpdateManyWithWhereWithoutUserInput = {
    where: ProfilePictureScalarWhereInput
    data: XOR<ProfilePictureUpdateManyMutationInput, ProfilePictureUncheckedUpdateManyWithoutUserInput>
  }

  export type ProfilePictureScalarWhereInput = {
    AND?: ProfilePictureScalarWhereInput | ProfilePictureScalarWhereInput[]
    OR?: ProfilePictureScalarWhereInput[]
    NOT?: ProfilePictureScalarWhereInput | ProfilePictureScalarWhereInput[]
    id?: IntFilter<"ProfilePicture"> | number
    user_id?: StringFilter<"ProfilePicture"> | string
    path?: StringFilter<"ProfilePicture"> | string
  }

  export type UserCreateWithoutPatientInput = {
    id?: string
    username: string
    password: string
    name: string
    token?: string | null
    category_result?: CategoryResultCreateNestedManyWithoutUserInput
    default_category_result?: DefaultCategoryResultCreateNestedManyWithoutUserInput
    patient_measurement?: PatientMeasurementCreateNestedManyWithoutUserInput
    profile_picture?: ProfilePictureCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatientInput = {
    id?: string
    username: string
    password: string
    name: string
    token?: string | null
    category_result?: CategoryResultUncheckedCreateNestedManyWithoutUserInput
    default_category_result?: DefaultCategoryResultUncheckedCreateNestedManyWithoutUserInput
    patient_measurement?: PatientMeasurementUncheckedCreateNestedManyWithoutUserInput
    profile_picture?: ProfilePictureUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatientInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
  }

  export type PatientMeasurementCreateWithoutPatientInput = {
    weight: number
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    category_result?: string | null
    category_color?: string | null
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutPatient_measurementInput
  }

  export type PatientMeasurementUncheckedCreateWithoutPatientInput = {
    id?: number
    user_id: string
    weight: number
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    category_result?: string | null
    category_color?: string | null
    timestamp?: Date | string
  }

  export type PatientMeasurementCreateOrConnectWithoutPatientInput = {
    where: PatientMeasurementWhereUniqueInput
    create: XOR<PatientMeasurementCreateWithoutPatientInput, PatientMeasurementUncheckedCreateWithoutPatientInput>
  }

  export type PatientMeasurementCreateManyPatientInputEnvelope = {
    data: PatientMeasurementCreateManyPatientInput | PatientMeasurementCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPatientInput = {
    update: XOR<UserUpdateWithoutPatientInput, UserUncheckedUpdateWithoutPatientInput>
    create: XOR<UserCreateWithoutPatientInput, UserUncheckedCreateWithoutPatientInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientInput, UserUncheckedUpdateWithoutPatientInput>
  }

  export type UserUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    category_result?: CategoryResultUpdateManyWithoutUserNestedInput
    default_category_result?: DefaultCategoryResultUpdateManyWithoutUserNestedInput
    patient_measurement?: PatientMeasurementUpdateManyWithoutUserNestedInput
    profile_picture?: ProfilePictureUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    category_result?: CategoryResultUncheckedUpdateManyWithoutUserNestedInput
    default_category_result?: DefaultCategoryResultUncheckedUpdateManyWithoutUserNestedInput
    patient_measurement?: PatientMeasurementUncheckedUpdateManyWithoutUserNestedInput
    profile_picture?: ProfilePictureUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PatientMeasurementUpsertWithWhereUniqueWithoutPatientInput = {
    where: PatientMeasurementWhereUniqueInput
    update: XOR<PatientMeasurementUpdateWithoutPatientInput, PatientMeasurementUncheckedUpdateWithoutPatientInput>
    create: XOR<PatientMeasurementCreateWithoutPatientInput, PatientMeasurementUncheckedCreateWithoutPatientInput>
  }

  export type PatientMeasurementUpdateWithWhereUniqueWithoutPatientInput = {
    where: PatientMeasurementWhereUniqueInput
    data: XOR<PatientMeasurementUpdateWithoutPatientInput, PatientMeasurementUncheckedUpdateWithoutPatientInput>
  }

  export type PatientMeasurementUpdateManyWithWhereWithoutPatientInput = {
    where: PatientMeasurementScalarWhereInput
    data: XOR<PatientMeasurementUpdateManyMutationInput, PatientMeasurementUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientCreateWithoutPatient_measurementInput = {
    name: string
    gender: $Enums.Gender
    phone: string
    work: string
    last_education: string
    place_of_birth: string
    date_of_birth: Date | string
    user: UserCreateNestedOneWithoutPatientInput
  }

  export type PatientUncheckedCreateWithoutPatient_measurementInput = {
    id?: number
    user_id: string
    name: string
    gender: $Enums.Gender
    phone: string
    work: string
    last_education: string
    place_of_birth: string
    date_of_birth: Date | string
  }

  export type PatientCreateOrConnectWithoutPatient_measurementInput = {
    where: PatientWhereUniqueInput
    create: XOR<PatientCreateWithoutPatient_measurementInput, PatientUncheckedCreateWithoutPatient_measurementInput>
  }

  export type UserCreateWithoutPatient_measurementInput = {
    id?: string
    username: string
    password: string
    name: string
    token?: string | null
    patient?: PatientCreateNestedManyWithoutUserInput
    category_result?: CategoryResultCreateNestedManyWithoutUserInput
    default_category_result?: DefaultCategoryResultCreateNestedManyWithoutUserInput
    profile_picture?: ProfilePictureCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPatient_measurementInput = {
    id?: string
    username: string
    password: string
    name: string
    token?: string | null
    patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    category_result?: CategoryResultUncheckedCreateNestedManyWithoutUserInput
    default_category_result?: DefaultCategoryResultUncheckedCreateNestedManyWithoutUserInput
    profile_picture?: ProfilePictureUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPatient_measurementInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatient_measurementInput, UserUncheckedCreateWithoutPatient_measurementInput>
  }

  export type PatientUpsertWithoutPatient_measurementInput = {
    update: XOR<PatientUpdateWithoutPatient_measurementInput, PatientUncheckedUpdateWithoutPatient_measurementInput>
    create: XOR<PatientCreateWithoutPatient_measurementInput, PatientUncheckedCreateWithoutPatient_measurementInput>
    where?: PatientWhereInput
  }

  export type PatientUpdateToOneWithWhereWithoutPatient_measurementInput = {
    where?: PatientWhereInput
    data: XOR<PatientUpdateWithoutPatient_measurementInput, PatientUncheckedUpdateWithoutPatient_measurementInput>
  }

  export type PatientUpdateWithoutPatient_measurementInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    work?: StringFieldUpdateOperationsInput | string
    last_education?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutPatient_measurementInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    work?: StringFieldUpdateOperationsInput | string
    last_education?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutPatient_measurementInput = {
    update: XOR<UserUpdateWithoutPatient_measurementInput, UserUncheckedUpdateWithoutPatient_measurementInput>
    create: XOR<UserCreateWithoutPatient_measurementInput, UserUncheckedCreateWithoutPatient_measurementInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatient_measurementInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatient_measurementInput, UserUncheckedUpdateWithoutPatient_measurementInput>
  }

  export type UserUpdateWithoutPatient_measurementInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateManyWithoutUserNestedInput
    category_result?: CategoryResultUpdateManyWithoutUserNestedInput
    default_category_result?: DefaultCategoryResultUpdateManyWithoutUserNestedInput
    profile_picture?: ProfilePictureUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPatient_measurementInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    category_result?: CategoryResultUncheckedUpdateManyWithoutUserNestedInput
    default_category_result?: DefaultCategoryResultUncheckedUpdateManyWithoutUserNestedInput
    profile_picture?: ProfilePictureUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCategory_resultInput = {
    id?: string
    username: string
    password: string
    name: string
    token?: string | null
    patient?: PatientCreateNestedManyWithoutUserInput
    default_category_result?: DefaultCategoryResultCreateNestedManyWithoutUserInput
    patient_measurement?: PatientMeasurementCreateNestedManyWithoutUserInput
    profile_picture?: ProfilePictureCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCategory_resultInput = {
    id?: string
    username: string
    password: string
    name: string
    token?: string | null
    patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    default_category_result?: DefaultCategoryResultUncheckedCreateNestedManyWithoutUserInput
    patient_measurement?: PatientMeasurementUncheckedCreateNestedManyWithoutUserInput
    profile_picture?: ProfilePictureUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCategory_resultInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCategory_resultInput, UserUncheckedCreateWithoutCategory_resultInput>
  }

  export type UserUpsertWithoutCategory_resultInput = {
    update: XOR<UserUpdateWithoutCategory_resultInput, UserUncheckedUpdateWithoutCategory_resultInput>
    create: XOR<UserCreateWithoutCategory_resultInput, UserUncheckedCreateWithoutCategory_resultInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCategory_resultInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCategory_resultInput, UserUncheckedUpdateWithoutCategory_resultInput>
  }

  export type UserUpdateWithoutCategory_resultInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateManyWithoutUserNestedInput
    default_category_result?: DefaultCategoryResultUpdateManyWithoutUserNestedInput
    patient_measurement?: PatientMeasurementUpdateManyWithoutUserNestedInput
    profile_picture?: ProfilePictureUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCategory_resultInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    default_category_result?: DefaultCategoryResultUncheckedUpdateManyWithoutUserNestedInput
    patient_measurement?: PatientMeasurementUncheckedUpdateManyWithoutUserNestedInput
    profile_picture?: ProfilePictureUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutDefault_category_resultInput = {
    id?: string
    username: string
    password: string
    name: string
    token?: string | null
    patient?: PatientCreateNestedManyWithoutUserInput
    category_result?: CategoryResultCreateNestedManyWithoutUserInput
    patient_measurement?: PatientMeasurementCreateNestedManyWithoutUserInput
    profile_picture?: ProfilePictureCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutDefault_category_resultInput = {
    id?: string
    username: string
    password: string
    name: string
    token?: string | null
    patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    category_result?: CategoryResultUncheckedCreateNestedManyWithoutUserInput
    patient_measurement?: PatientMeasurementUncheckedCreateNestedManyWithoutUserInput
    profile_picture?: ProfilePictureUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutDefault_category_resultInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDefault_category_resultInput, UserUncheckedCreateWithoutDefault_category_resultInput>
  }

  export type UserUpsertWithoutDefault_category_resultInput = {
    update: XOR<UserUpdateWithoutDefault_category_resultInput, UserUncheckedUpdateWithoutDefault_category_resultInput>
    create: XOR<UserCreateWithoutDefault_category_resultInput, UserUncheckedCreateWithoutDefault_category_resultInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDefault_category_resultInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDefault_category_resultInput, UserUncheckedUpdateWithoutDefault_category_resultInput>
  }

  export type UserUpdateWithoutDefault_category_resultInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateManyWithoutUserNestedInput
    category_result?: CategoryResultUpdateManyWithoutUserNestedInput
    patient_measurement?: PatientMeasurementUpdateManyWithoutUserNestedInput
    profile_picture?: ProfilePictureUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutDefault_category_resultInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    category_result?: CategoryResultUncheckedUpdateManyWithoutUserNestedInput
    patient_measurement?: PatientMeasurementUncheckedUpdateManyWithoutUserNestedInput
    profile_picture?: ProfilePictureUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutProfile_pictureInput = {
    id?: string
    username: string
    password: string
    name: string
    token?: string | null
    patient?: PatientCreateNestedManyWithoutUserInput
    category_result?: CategoryResultCreateNestedManyWithoutUserInput
    default_category_result?: DefaultCategoryResultCreateNestedManyWithoutUserInput
    patient_measurement?: PatientMeasurementCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProfile_pictureInput = {
    id?: string
    username: string
    password: string
    name: string
    token?: string | null
    patient?: PatientUncheckedCreateNestedManyWithoutUserInput
    category_result?: CategoryResultUncheckedCreateNestedManyWithoutUserInput
    default_category_result?: DefaultCategoryResultUncheckedCreateNestedManyWithoutUserInput
    patient_measurement?: PatientMeasurementUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProfile_pictureInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfile_pictureInput, UserUncheckedCreateWithoutProfile_pictureInput>
  }

  export type UserUpsertWithoutProfile_pictureInput = {
    update: XOR<UserUpdateWithoutProfile_pictureInput, UserUncheckedUpdateWithoutProfile_pictureInput>
    create: XOR<UserCreateWithoutProfile_pictureInput, UserUncheckedCreateWithoutProfile_pictureInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfile_pictureInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfile_pictureInput, UserUncheckedUpdateWithoutProfile_pictureInput>
  }

  export type UserUpdateWithoutProfile_pictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUpdateManyWithoutUserNestedInput
    category_result?: CategoryResultUpdateManyWithoutUserNestedInput
    default_category_result?: DefaultCategoryResultUpdateManyWithoutUserNestedInput
    patient_measurement?: PatientMeasurementUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProfile_pictureInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    token?: NullableStringFieldUpdateOperationsInput | string | null
    patient?: PatientUncheckedUpdateManyWithoutUserNestedInput
    category_result?: CategoryResultUncheckedUpdateManyWithoutUserNestedInput
    default_category_result?: DefaultCategoryResultUncheckedUpdateManyWithoutUserNestedInput
    patient_measurement?: PatientMeasurementUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PatientCreateManyUserInput = {
    id?: number
    name: string
    gender: $Enums.Gender
    phone: string
    work: string
    last_education: string
    place_of_birth: string
    date_of_birth: Date | string
  }

  export type CategoryResultCreateManyUserInput = {
    id?: number
    name: string
    gender?: string
    color: string
    is_age_required: boolean
    min_age?: number | null
    max_age?: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
  }

  export type DefaultCategoryResultCreateManyUserInput = {
    id?: number
    name: string
    gender?: string
    color: string
    is_age_required: boolean
    min_age?: number | null
    max_age?: number | null
    min_systolic: number
    max_systolic: number
    min_diastolic: number
    max_diastolic: number
    description: string
  }

  export type PatientMeasurementCreateManyUserInput = {
    id?: number
    patient_id: number
    weight: number
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    category_result?: string | null
    category_color?: string | null
    timestamp?: Date | string
  }

  export type ProfilePictureCreateManyUserInput = {
    id?: number
    path: string
  }

  export type PatientUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    work?: StringFieldUpdateOperationsInput | string
    last_education?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    patient_measurement?: PatientMeasurementUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    work?: StringFieldUpdateOperationsInput | string
    last_education?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
    patient_measurement?: PatientMeasurementUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type PatientUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    phone?: StringFieldUpdateOperationsInput | string
    work?: StringFieldUpdateOperationsInput | string
    last_education?: StringFieldUpdateOperationsInput | string
    place_of_birth?: StringFieldUpdateOperationsInput | string
    date_of_birth?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryResultUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryResultUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryResultUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type DefaultCategoryResultUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type DefaultCategoryResultUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type DefaultCategoryResultUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    gender?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    is_age_required?: BoolFieldUpdateOperationsInput | boolean
    min_age?: NullableIntFieldUpdateOperationsInput | number | null
    max_age?: NullableIntFieldUpdateOperationsInput | number | null
    min_systolic?: IntFieldUpdateOperationsInput | number
    max_systolic?: IntFieldUpdateOperationsInput | number
    min_diastolic?: IntFieldUpdateOperationsInput | number
    max_diastolic?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
  }

  export type PatientMeasurementUpdateWithoutUserInput = {
    weight?: FloatFieldUpdateOperationsInput | number
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    category_result?: NullableStringFieldUpdateOperationsInput | string | null
    category_color?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: PatientUpdateOneRequiredWithoutPatient_measurementNestedInput
  }

  export type PatientMeasurementUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    category_result?: NullableStringFieldUpdateOperationsInput | string | null
    category_color?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientMeasurementUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    patient_id?: IntFieldUpdateOperationsInput | number
    weight?: FloatFieldUpdateOperationsInput | number
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    category_result?: NullableStringFieldUpdateOperationsInput | string | null
    category_color?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProfilePictureUpdateWithoutUserInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilePictureUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type ProfilePictureUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    path?: StringFieldUpdateOperationsInput | string
  }

  export type PatientMeasurementCreateManyPatientInput = {
    id?: number
    user_id: string
    weight: number
    systolic: number
    diastolic: number
    mean: number
    heart_rate: number
    category_result?: string | null
    category_color?: string | null
    timestamp?: Date | string
  }

  export type PatientMeasurementUpdateWithoutPatientInput = {
    weight?: FloatFieldUpdateOperationsInput | number
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    category_result?: NullableStringFieldUpdateOperationsInput | string | null
    category_color?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPatient_measurementNestedInput
  }

  export type PatientMeasurementUncheckedUpdateWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    category_result?: NullableStringFieldUpdateOperationsInput | string | null
    category_color?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientMeasurementUncheckedUpdateManyWithoutPatientInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: StringFieldUpdateOperationsInput | string
    weight?: FloatFieldUpdateOperationsInput | number
    systolic?: FloatFieldUpdateOperationsInput | number
    diastolic?: FloatFieldUpdateOperationsInput | number
    mean?: FloatFieldUpdateOperationsInput | number
    heart_rate?: FloatFieldUpdateOperationsInput | number
    category_result?: NullableStringFieldUpdateOperationsInput | string | null
    category_color?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}