// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

// datasource db {
//   provider = "postgres"
//   url      = env("DATABASE_URL")
// }
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String @db.VarChar(100) @unique
  password String @db.VarChar(100)
  name String @db.VarChar(255)
  token String? @db.VarChar(100)

  patient  Patient[] 
  category_result CategoryResult[]
  default_category_result DefaultCategoryResult[]
  patient_measurement PatientMeasurement[]
  profile_picture ProfilePicture[]

  @@map("users")
}

model Measurement {
  id Int @id @default(autoincrement())
  user_id  String   @db.VarChar(100) @unique
  systolic Float
  diastolic Float
  mean Float
  heart_rate Float
  timestamp DateTime @default(now())

  @@map("measurements")
}

model Patient {
  id Int @id @default(autoincrement())
  user_id String @db.VarChar(100)
  name String @db.VarChar(255)
  gender Gender
  phone String @db.VarChar(13)
  work String @db.VarChar(50)
  last_education String @db.VarChar(50)
  place_of_birth String @db.VarChar(50)
  date_of_birth DateTime

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  patient_measurement PatientMeasurement[]

  @@map("patients")
}

model PatientMeasurement {
  id Int @id @default(autoincrement())
  patient_id Int
  user_id String
  weight Float
  systolic Float
  diastolic Float
  mean Float
  heart_rate Float
  category_result String?
  category_color String?
  timestamp DateTime @default(now())

  @@map("patient_measurements")

  patient Patient @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model CategoryResult {
  id Int @id @default(autoincrement())
  user_id String 
  name String @db.VarChar(255)
  gender String @default("any")
  color String
  is_age_required Boolean
  min_age Int? @default(0)
  max_age Int? @default(0)
  min_systolic Int 
  max_systolic Int 
  min_diastolic Int 
  max_diastolic Int 
  description String @db.VarChar(255) 

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("category_results")
  @@unique([ gender, min_age, max_age, min_systolic, max_systolic, min_diastolic, max_diastolic])
}

model DefaultCategoryResult {
  id Int @id @default(autoincrement())
  user_id String 
  name String @db.VarChar(255)
  gender String @default("any")
  color String
  is_age_required Boolean
  min_age Int? @default(0)
  max_age Int? @default(0)
  min_systolic Int 
  max_systolic Int 
  min_diastolic Int 
  max_diastolic Int 
  description String @db.VarChar(255) 

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("default_category_results")
  @@unique([ gender, min_age, max_age, min_systolic, max_systolic, min_diastolic, max_diastolic])
}

model ProfilePicture {
  id Int @id @default(autoincrement())
  user_id String
  path String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("profile_pictures")
}


enum Gender {
  male
  female
}

